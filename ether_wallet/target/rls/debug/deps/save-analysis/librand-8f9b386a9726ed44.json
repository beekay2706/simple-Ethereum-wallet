{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5","program":"C:\\Users\\Barat\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\bin\\rls.exe","arguments":["--crate-name","rand","C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=8f9b386a9726ed44","-C","extra-filename=-8f9b386a9726ed44","--out-dir","e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps","-L","dependency=e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps","--extern","rand_chacha=e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps\\librand_chacha-30aa48b1591338de.rmeta","--extern","rand_core=e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps\\librand_core-fc9e911baf7a9029.rmeta","--extern","rand_hc=e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps\\librand_hc-2e6cdb73faf4a373.rmeta","--extern","rand_isaac=e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps\\librand_isaac-d485ba7ef0a6423b.rmeta","--extern","rand_jitter=e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps\\librand_jitter-9796700bfb26c548.rmeta","--extern","rand_pcg=e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps\\librand_pcg-b4e6aa6bbe1c0450.rmeta","--extern","rand_xorshift=e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps\\librand_xorshift-5045af576e7d4116.rmeta","--extern","winapi=e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps\\libwinapi-4f116b91c49b4f46.rmeta","--cap-lints","allow","--cfg","rustc_1_25","--cfg","rustc_1_26","--cfg","rustc_1_27","-L","native=C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\winapi-x86_64-pc-windows-gnu-0.4.0\\lib","--error-format=json","--sysroot","C:\\Users\\Barat\\.rustup/toolchains/stable-x86_64-pc-windows-gnu"],"output":"e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps\\librand-8f9b386a9726ed44.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[12845317774973193410,0]},"crate_root":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src","external_crates":[{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[7484747461353352854,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16799927046356361214,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[15711970465252999667,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":4,"id":{"name":"rand_jitter","disambiguator":[1916619025252232058,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":5,"id":{"name":"rand_core","disambiguator":[9857175713052254348,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":6,"id":{"name":"winapi","disambiguator":[8092026463587222292,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":7,"id":{"name":"std","disambiguator":[9933199878862807254,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":8,"id":{"name":"alloc","disambiguator":[1529599006453177946,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":9,"id":{"name":"libc","disambiguator":[259964764378729836,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":10,"id":{"name":"unwind","disambiguator":[1401592996150409924,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":11,"id":{"name":"cfg_if","disambiguator":[14734655664086317095,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4074841263751738329,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4433341090040332389,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[11866525247851478942,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":15,"id":{"name":"std_detect","disambiguator":[5523593855187046791,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":16,"id":{"name":"addr2line","disambiguator":[12555581230445737962,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":17,"id":{"name":"gimli","disambiguator":[10455931732283353623,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":18,"id":{"name":"object","disambiguator":[4593984188917249458,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":19,"id":{"name":"memchr","disambiguator":[4827989473313180090,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":20,"id":{"name":"panic_unwind","disambiguator":[17684584555704356724,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":21,"id":{"name":"rand_isaac","disambiguator":[15156394899830360544,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":22,"id":{"name":"rand_core","disambiguator":[7849570665042343197,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":23,"id":{"name":"rand_chacha","disambiguator":[99260136893226325,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":24,"id":{"name":"rand_hc","disambiguator":[1003670429601574036,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":25,"id":{"name":"rand_pcg","disambiguator":[16125208172397097074,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":26,"id":{"name":"rand_xorshift","disambiguator":[15005755135177315631,0]}}],"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":408,"byte_end":25968,"line_start":10,"line_end":830,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":5,"index":157},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3058,"byte_end":3065,"line_start":86,"line_end":86,"column_start":21,"column_end":28},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":162},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3067,"byte_end":3076,"line_start":86,"line_end":86,"column_start":30,"column_end":39},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":163},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3078,"byte_end":3089,"line_start":86,"line_end":86,"column_start":41,"column_end":52},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":181},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3112,"byte_end":3121,"line_start":87,"line_end":87,"column_start":21,"column_end":30},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":203},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3123,"byte_end":3128,"line_start":87,"line_end":87,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1173},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33210,"byte_end":33222,"line_start":180,"line_end":180,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":33}},{"kind":"Use","ref_id":{"krate":0,"index":1174},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33210,"byte_end":33222,"line_start":180,"line_end":180,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":33}},{"kind":"Use","ref_id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33262,"byte_end":33269,"line_start":181,"line_end":181,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":33}},{"kind":"Use","ref_id":{"krate":0,"index":1111},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33293,"byte_end":33305,"line_start":182,"line_end":182,"column_start":23,"column_end":35},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":33}},{"kind":"Use","ref_id":{"krate":0,"index":1112},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33293,"byte_end":33305,"line_start":182,"line_end":182,"column_start":23,"column_end":35},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":33}},{"kind":"Use","ref_id":{"krate":0,"index":1118},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33307,"byte_end":33313,"line_start":182,"line_end":182,"column_start":37,"column_end":43},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":33}},{"kind":"Use","ref_id":{"krate":0,"index":1119},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33307,"byte_end":33313,"line_start":182,"line_end":182,"column_start":37,"column_end":43},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":33}},{"kind":"Use","ref_id":{"krate":0,"index":1104},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33341,"byte_end":33350,"line_start":183,"line_end":183,"column_start":26,"column_end":35},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":33}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":147020,"byte_end":147032,"line_start":22,"line_end":22,"column_start":42,"column_end":54},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":1616},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":147067,"byte_end":147075,"line_start":23,"line_end":23,"column_start":34,"column_end":42},"alias_span":null,"name":"SmallRng","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":1623},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":147077,"byte_end":147083,"line_start":23,"line_end":23,"column_start":44,"column_end":50},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":147178,"byte_end":147181,"line_start":25,"line_end":25,"column_start":28,"column_end":31},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":5,"index":157},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":147183,"byte_end":147190,"line_start":25,"line_end":25,"column_start":33,"column_end":40},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":5,"index":162},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":147192,"byte_end":147201,"line_start":25,"line_end":25,"column_start":42,"column_end":51},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":5,"index":163},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":147203,"byte_end":147214,"line_start":25,"line_end":25,"column_start":53,"column_end":64},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":147332,"byte_end":147343,"line_start":27,"line_end":27,"column_start":33,"column_end":44},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":147345,"byte_end":147359,"line_start":27,"line_end":27,"column_start":46,"column_end":60},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":1658},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148050,"byte_end":148061,"line_start":19,"line_end":19,"column_start":21,"column_end":32},"alias_span":null,"name":"XorShiftRng","value":"","parent":{"krate":0,"index":363}},{"kind":"Use","ref_id":{"krate":0,"index":1630},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148203,"byte_end":148211,"line_start":22,"line_end":22,"column_start":46,"column_end":54},"alias_span":null,"name":"IsaacRng","value":"","parent":{"krate":0,"index":367}},{"kind":"Use","ref_id":{"krate":0,"index":1637},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148293,"byte_end":148303,"line_start":25,"line_end":25,"column_start":46,"column_end":56},"alias_span":null,"name":"Isaac64Rng","value":"","parent":{"krate":0,"index":371}},{"kind":"Use","ref_id":{"krate":0,"index":1630},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148364,"byte_end":148372,"line_start":27,"line_end":27,"column_start":58,"column_end":66},"alias_span":null,"name":"IsaacRng","value":"","parent":{"krate":0,"index":363}},{"kind":"Use","ref_id":{"krate":0,"index":1637},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148374,"byte_end":148384,"line_start":27,"line_end":27,"column_start":68,"column_end":78},"alias_span":null,"name":"Isaac64Rng","value":"","parent":{"krate":0,"index":363}},{"kind":"Use","ref_id":{"krate":0,"index":1644},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148529,"byte_end":148538,"line_start":30,"line_end":30,"column_start":46,"column_end":55},"alias_span":null,"name":"ChaChaRng","value":"","parent":{"krate":0,"index":382}},{"kind":"Use","ref_id":{"krate":0,"index":1644},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148598,"byte_end":148607,"line_start":32,"line_end":32,"column_start":57,"column_end":66},"alias_span":null,"name":"ChaChaRng","value":"","parent":{"krate":0,"index":363}},{"kind":"Use","ref_id":{"krate":0,"index":1651},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148749,"byte_end":148757,"line_start":35,"line_end":35,"column_start":46,"column_end":54},"alias_span":null,"name":"Hc128Rng","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":1651},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148817,"byte_end":148825,"line_start":37,"line_end":37,"column_start":57,"column_end":65},"alias_span":null,"name":"Hc128Rng","value":"","parent":{"krate":0,"index":363}},{"kind":"Use","ref_id":{"krate":0,"index":1588},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\mod.rs","byte_start":156467,"byte_end":156479,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":397}},{"kind":"Use","ref_id":{"krate":4,"index":58},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155683,"byte_end":155692,"line_start":159,"line_end":159,"column_start":23,"column_end":32},"alias_span":null,"name":"JitterRng","value":"","parent":{"krate":0,"index":396}},{"kind":"Use","ref_id":{"krate":4,"index":103},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155694,"byte_end":155704,"line_start":159,"line_end":159,"column_start":34,"column_end":44},"alias_span":null,"name":"TimerError","value":"","parent":{"krate":0,"index":396}},{"kind":"Use","ref_id":{"krate":0,"index":1616},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155786,"byte_end":155794,"line_start":162,"line_end":162,"column_start":22,"column_end":30},"alias_span":null,"name":"SmallRng","value":"","parent":{"krate":0,"index":396}},{"kind":"Use","ref_id":{"krate":0,"index":1623},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155815,"byte_end":155821,"line_start":163,"line_end":163,"column_start":20,"column_end":26},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":396}},{"kind":"Use","ref_id":{"krate":0,"index":1679},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3588,"byte_end":3600,"line_start":106,"line_end":106,"column_start":36,"column_end":48},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1644},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3841,"byte_end":3850,"line_start":117,"line_end":117,"column_start":37,"column_end":46},"alias_span":null,"name":"ChaChaRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1630},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3852,"byte_end":3860,"line_start":117,"line_end":117,"column_start":48,"column_end":56},"alias_span":null,"name":"IsaacRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1637},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3862,"byte_end":3872,"line_start":117,"line_end":117,"column_start":58,"column_end":68},"alias_span":null,"name":"Isaac64Rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1658},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3874,"byte_end":3885,"line_start":117,"line_end":117,"column_start":70,"column_end":81},"alias_span":null,"name":"XorShiftRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1665},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3944,"byte_end":3950,"line_start":119,"line_end":119,"column_start":36,"column_end":42},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1672},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4031,"byte_end":4040,"line_start":125,"line_end":125,"column_start":25,"column_end":34},"alias_span":null,"name":"JitterRng","value":"","parent":{"krate":0,"index":731}},{"kind":"Use","ref_id":{"krate":4,"index":103},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4060,"byte_end":4070,"line_start":126,"line_end":126,"column_start":19,"column_end":29},"alias_span":null,"name":"TimerError","value":"","parent":{"krate":0,"index":731}},{"kind":"Use","ref_id":{"krate":0,"index":1644},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4259,"byte_end":4268,"line_start":137,"line_end":137,"column_start":25,"column_end":34},"alias_span":null,"name":"ChaChaRng","value":"","parent":{"krate":0,"index":738}},{"kind":"Use","ref_id":{"krate":0,"index":1630},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4349,"byte_end":4357,"line_start":142,"line_end":142,"column_start":26,"column_end":34},"alias_span":null,"name":"IsaacRng","value":"","parent":{"krate":0,"index":742}},{"kind":"Use","ref_id":{"krate":0,"index":1637},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4359,"byte_end":4369,"line_start":142,"line_end":142,"column_start":36,"column_end":46},"alias_span":null,"name":"Isaac64Rng","value":"","parent":{"krate":0,"index":742}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":408,"byte_end":25968,"line_start":10,"line_end":830,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":332},{"krate":0,"index":363},{"krate":0,"index":396},{"krate":0,"index":555},{"krate":0,"index":587},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":728},{"krate":0,"index":731},{"krate":0,"index":738},{"krate":0,"index":742},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":754},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":811},{"krate":0,"index":813},{"krate":0,"index":816},{"krate":0,"index":819},{"krate":0,"index":1692},{"krate":0,"index":1695},{"krate":0,"index":1698},{"krate":0,"index":1701},{"krate":0,"index":1704},{"krate":0,"index":1707},{"krate":0,"index":1710},{"krate":0,"index":1713},{"krate":0,"index":1716},{"krate":0,"index":1719},{"krate":0,"index":1722},{"krate":0,"index":820},{"krate":0,"index":1885},{"krate":0,"index":1880},{"krate":0,"index":1875},{"krate":0,"index":1870},{"krate":0,"index":1865},{"krate":0,"index":1860},{"krate":0,"index":1855},{"krate":0,"index":1850},{"krate":0,"index":1845},{"krate":0,"index":1840},{"krate":0,"index":1835},{"krate":0,"index":1830},{"krate":0,"index":1825},{"krate":0,"index":1820},{"krate":0,"index":1815},{"krate":0,"index":1810},{"krate":0,"index":1805},{"krate":0,"index":1800},{"krate":0,"index":1795},{"krate":0,"index":1790},{"krate":0,"index":1785},{"krate":0,"index":1780},{"krate":0,"index":1775},{"krate":0,"index":1770},{"krate":0,"index":1765},{"krate":0,"index":1760},{"krate":0,"index":1755},{"krate":0,"index":1750},{"krate":0,"index":1745},{"krate":0,"index":1740},{"krate":0,"index":1735},{"krate":0,"index":1730},{"krate":0,"index":1725},{"krate":0,"index":1920},{"krate":0,"index":1915},{"krate":0,"index":1910},{"krate":0,"index":1905},{"krate":0,"index":1900},{"krate":0,"index":1895},{"krate":0,"index":1890}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"/ Utilities for random number generation","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":408,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":451,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Rand provides utilities to generate random numbers, to convert them to","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":455,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ useful types and distributions, and some randomness-related algorithms.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":530,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":606,"byte_end":609,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Quick Start","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":610,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ To get you started quickly, the easiest and highest-level way to get","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":632,"byte_end":704,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ a random value is to use [`random()`]; alternatively you can use","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":705,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":774,"byte_end":854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ the [`distributions`] and [`seq`] modules provide further","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":855,"byte_end":916,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ functionality on top of RNGs.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":917,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":955,"byte_end":962,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":963,"byte_end":988,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":989,"byte_end":992,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":993,"byte_end":1039,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"/     // Try printing a random unicode code point (probably a bad idea)!","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1040,"byte_end":1114,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/     println!(\"char: {}\", rand::random::<char>());","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1115,"byte_end":1168,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1169,"byte_end":1174,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1175,"byte_end":1178,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1179,"byte_end":1216,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/ let y: f64 = rng.gen(); // generates a float between 0 and 1","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1217,"byte_end":1281,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1282,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut nums: Vec<i32> = (1..100).collect();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1286,"byte_end":1334,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/ nums.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1335,"byte_end":1362,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1363,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1371,"byte_end":1374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # The Book","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1375,"byte_end":1389,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1390,"byte_end":1393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ For the user guide and futher documentation, please read","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1394,"byte_end":1454,"line_start":40,"line_end":40,"column_start":1,"column_end":61}},{"value":"/ [The Rust Rand Book](https://rust-random.github.io/book).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1455,"byte_end":1516,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1734,"byte_end":1756,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1757,"byte_end":1796,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"no_std","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1891,"byte_end":1897,"line_start":52,"line_end":52,"column_start":33,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":144},{"krate":0,"index":159},{"krate":0,"index":180},{"krate":0,"index":211},{"krate":0,"index":257},{"krate":0,"index":297},{"krate":0,"index":304},{"krate":0,"index":1546},{"krate":0,"index":1554},{"krate":0,"index":310},{"krate":0,"index":318},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1567},{"krate":0,"index":1571},{"krate":0,"index":1573},{"krate":0,"index":1576},{"krate":0,"index":1579},{"krate":0,"index":1584},{"krate":0,"index":323},{"krate":0,"index":327}],"decl_id":null,"docs":" Generating random samples from probability distributions.","sig":null,"attributes":[{"value":"/ Generating random samples from probability distributions.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26378,"byte_end":26439,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26440,"byte_end":26443,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This module is the home of the [`Distribution`] trait and several of its","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26444,"byte_end":26520,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ implementations. It is the workhorse behind some of the convenient","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26521,"byte_end":26591,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/ functionality of the [`Rng`] trait, including [`gen`], [`gen_range`] and","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26592,"byte_end":26668,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ of course [`sample`].","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26669,"byte_end":26694,"line_start":15,"line_end":15,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26695,"byte_end":26698,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Abstractly, a [probability distribution] describes the probability of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26699,"byte_end":26772,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ occurance of each value in its sample space.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26773,"byte_end":26821,"line_start":18,"line_end":18,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26822,"byte_end":26825,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ More concretely, an implementation of `Distribution<T>` for type `X` is an","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26826,"byte_end":26904,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ algorithm for choosing values from the sample space (a subset of `T`)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26905,"byte_end":26978,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ according to the distribution `X` represents, using an external source of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":26979,"byte_end":27056,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ randomness (an RNG supplied to the `sample` function).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27057,"byte_end":27115,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27116,"byte_end":27119,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ A type `X` may implement `Distribution<T>` for multiple types `T`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27120,"byte_end":27190,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ Any type implementing [`Distribution`] is stateless (i.e. immutable),","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27191,"byte_end":27264,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ but it may have internal parameters set at construction time (for example,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27265,"byte_end":27343,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ [`Uniform`] allows specification of its sample space as a range within `T`).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27344,"byte_end":27424,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27425,"byte_end":27428,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27429,"byte_end":27432,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # The `Standard` distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27433,"byte_end":27466,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27467,"byte_end":27470,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution is important to mention. This is the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27471,"byte_end":27541,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ distribution used by [`Rng::gen()`] and represents the \"default\" way to","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27542,"byte_end":27617,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ produce a random value for many different types, including most primitive","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27618,"byte_end":27695,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ types, tuples, arrays, and a few derived types. See the documentation of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27696,"byte_end":27772,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"/ [`Standard`] for more details.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27773,"byte_end":27807,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27808,"byte_end":27811,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27812,"byte_end":27891,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ possible to generate type `T` with [`Rng::gen()`], and by extension also","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27892,"byte_end":27968,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ with the [`random()`] function.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":27969,"byte_end":28004,"line_start":41,"line_end":41,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28005,"byte_end":28008,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28009,"byte_end":28012,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Distribution to sample from a `Uniform` range","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28013,"byte_end":28064,"line_start":44,"line_end":44,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28065,"byte_end":28068,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ The [`Uniform`] distribution is more flexible than [`Standard`], but also","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28069,"byte_end":28146,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ more specialised: it supports fewer target types, but allows the sample","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28147,"byte_end":28222,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ space to be specified as an arbitrary range within its target type `T`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28223,"byte_end":28298,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/ Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28299,"byte_end":28377,"line_start":49,"line_end":49,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28378,"byte_end":28381,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Values may be sampled from this distribution using [`Rng::gen_range`] or","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28382,"byte_end":28458,"line_start":51,"line_end":51,"column_start":1,"column_end":77}},{"value":"/ by creating a distribution object with [`Uniform::new`],","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28459,"byte_end":28519,"line_start":52,"line_end":52,"column_start":1,"column_end":61}},{"value":"/ [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28520,"byte_end":28598,"line_start":53,"line_end":53,"column_start":1,"column_end":79}},{"value":"/ known at compile time it is typically faster to reuse an existing","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28599,"byte_end":28668,"line_start":54,"line_end":54,"column_start":1,"column_end":70}},{"value":"/ distribution object than to call [`Rng::gen_range`].","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28669,"byte_end":28725,"line_start":55,"line_end":55,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28726,"byte_end":28729,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ User types `T` may also implement `Distribution<T>` for [`Uniform`],","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28730,"byte_end":28802,"line_start":57,"line_end":57,"column_start":1,"column_end":73}},{"value":"/ although this is less straightforward than for [`Standard`] (see the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28803,"byte_end":28875,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/ documentation in the [`uniform`] module. Doing so enables generation of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28876,"byte_end":28951,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ values of type `T` with  [`Rng::gen_range`].","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":28952,"byte_end":29000,"line_start":60,"line_end":60,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29001,"byte_end":29004,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29005,"byte_end":29008,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Other distributions","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29009,"byte_end":29034,"line_start":63,"line_end":63,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29035,"byte_end":29038,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ There are surprisingly many ways to uniformly generate random floats. A","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29039,"byte_end":29114,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ range between 0 and 1 is standard, but the exact bounds (open vs closed)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29115,"byte_end":29191,"line_start":66,"line_end":66,"column_start":1,"column_end":77}},{"value":"/ and accuracy differ. In addition to the [`Standard`] distribution Rand offers","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29192,"byte_end":29273,"line_start":67,"line_end":67,"column_start":1,"column_end":82}},{"value":"/ [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29274,"byte_end":29357,"line_start":68,"line_end":68,"column_start":1,"column_end":84}},{"value":"/ [`Standard`] documentation for more details.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29358,"byte_end":29406,"line_start":69,"line_end":69,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29407,"byte_end":29410,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ [`Alphanumeric`] is a simple distribution to sample random letters and","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29411,"byte_end":29485,"line_start":71,"line_end":71,"column_start":1,"column_end":75}},{"value":"/ numbers of the `char` type; in contrast [`Standard`] may sample any valid","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29486,"byte_end":29563,"line_start":72,"line_end":72,"column_start":1,"column_end":78}},{"value":"/ `char`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29564,"byte_end":29575,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29576,"byte_end":29579,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`WeightedIndex`] can be used to do weighted sampling from a set of items,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29580,"byte_end":29658,"line_start":75,"line_end":75,"column_start":1,"column_end":79}},{"value":"/ such as from an array.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29659,"byte_end":29685,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29686,"byte_end":29689,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ # Non-uniform probability distributions","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29690,"byte_end":29733,"line_start":78,"line_end":78,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29734,"byte_end":29737,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ Rand currently provides the following probability distributions:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29738,"byte_end":29806,"line_start":80,"line_end":80,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29807,"byte_end":29810,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ - Related to real-valued quantities that grow linearly","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29811,"byte_end":29869,"line_start":82,"line_end":82,"column_start":1,"column_end":59}},{"value":"/   (e.g. errors, offsets):","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29870,"byte_end":29899,"line_start":83,"line_end":83,"column_start":1,"column_end":30}},{"value":"/   - [`Normal`] distribution, and [`StandardNormal`] as a primitive","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29900,"byte_end":29970,"line_start":84,"line_end":84,"column_start":1,"column_end":71}},{"value":"/   - [`Cauchy`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":29971,"byte_end":30002,"line_start":85,"line_end":85,"column_start":1,"column_end":32}},{"value":"/ - Related to Bernoulli trials (yes/no events, with a given probability):","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30003,"byte_end":30079,"line_start":86,"line_end":86,"column_start":1,"column_end":77}},{"value":"/   - [`Binomial`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30080,"byte_end":30113,"line_start":87,"line_end":87,"column_start":1,"column_end":34}},{"value":"/   - [`Bernoulli`] distribution, similar to [`Rng::gen_bool`].","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30114,"byte_end":30179,"line_start":88,"line_end":88,"column_start":1,"column_end":66}},{"value":"/ - Related to positive real-valued quantities that grow exponentially","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30180,"byte_end":30252,"line_start":89,"line_end":89,"column_start":1,"column_end":73}},{"value":"/   (e.g. prices, incomes, populations):","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30253,"byte_end":30295,"line_start":90,"line_end":90,"column_start":1,"column_end":43}},{"value":"/   - [`LogNormal`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30296,"byte_end":30330,"line_start":91,"line_end":91,"column_start":1,"column_end":35}},{"value":"/ - Related to the occurrence of independent events at a given rate:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30331,"byte_end":30401,"line_start":92,"line_end":92,"column_start":1,"column_end":71}},{"value":"/   - [`Pareto`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30402,"byte_end":30433,"line_start":93,"line_end":93,"column_start":1,"column_end":32}},{"value":"/   - [`Poisson`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30434,"byte_end":30466,"line_start":94,"line_end":94,"column_start":1,"column_end":33}},{"value":"/   - [`Exp`]onential distribution, and [`Exp1`] as a primitive","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30467,"byte_end":30532,"line_start":95,"line_end":95,"column_start":1,"column_end":66}},{"value":"/   - [`Weibull`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30533,"byte_end":30565,"line_start":96,"line_end":96,"column_start":1,"column_end":33}},{"value":"/ - Gamma and derived distributions:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30566,"byte_end":30604,"line_start":97,"line_end":97,"column_start":1,"column_end":39}},{"value":"/   - [`Gamma`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30605,"byte_end":30635,"line_start":98,"line_end":98,"column_start":1,"column_end":31}},{"value":"/   - [`ChiSquared`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30636,"byte_end":30671,"line_start":99,"line_end":99,"column_start":1,"column_end":36}},{"value":"/   - [`StudentT`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30672,"byte_end":30705,"line_start":100,"line_end":100,"column_start":1,"column_end":34}},{"value":"/   - [`FisherF`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30706,"byte_end":30738,"line_start":101,"line_end":101,"column_start":1,"column_end":33}},{"value":"/ - Triangular distribution:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30739,"byte_end":30769,"line_start":102,"line_end":102,"column_start":1,"column_end":31}},{"value":"/   - [`Beta`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30770,"byte_end":30799,"line_start":103,"line_end":103,"column_start":1,"column_end":30}},{"value":"/   - [`Triangular`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30800,"byte_end":30835,"line_start":104,"line_end":104,"column_start":1,"column_end":36}},{"value":"/ - Multivariate probability distributions","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30836,"byte_end":30880,"line_start":105,"line_end":105,"column_start":1,"column_end":45}},{"value":"/   - [`Dirichlet`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30881,"byte_end":30915,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/   - [`UnitSphereSurface`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30916,"byte_end":30958,"line_start":107,"line_end":107,"column_start":1,"column_end":43}},{"value":"/   - [`UnitCircle`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30959,"byte_end":30994,"line_start":108,"line_end":108,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30995,"byte_end":30998,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":30999,"byte_end":31013,"line_start":110,"line_end":110,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31014,"byte_end":31017,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ Sampling from a distribution:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31018,"byte_end":31051,"line_start":112,"line_end":112,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31052,"byte_end":31055,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31056,"byte_end":31063,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31064,"byte_end":31096,"line_start":115,"line_end":115,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Exp;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31097,"byte_end":31130,"line_start":116,"line_end":116,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31131,"byte_end":31134,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ let exp = Exp::new(2.0);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31135,"byte_end":31163,"line_start":118,"line_end":118,"column_start":1,"column_end":29}},{"value":"/ let v = thread_rng().sample(exp);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31164,"byte_end":31201,"line_start":119,"line_end":119,"column_start":1,"column_end":38}},{"value":"/ println!(\"{} is from an Exp(2) distribution\", v);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31202,"byte_end":31255,"line_start":120,"line_end":120,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31256,"byte_end":31263,"line_start":121,"line_end":121,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31264,"byte_end":31267,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ Implementing the [`Standard`] distribution for a user type:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31268,"byte_end":31331,"line_start":123,"line_end":123,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31332,"byte_end":31335,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31336,"byte_end":31343,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31344,"byte_end":31370,"line_start":126,"line_end":126,"column_start":1,"column_end":27}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31371,"byte_end":31389,"line_start":127,"line_end":127,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{Distribution, Standard};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31390,"byte_end":31444,"line_start":128,"line_end":128,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31445,"byte_end":31448,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ struct MyF32 {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31449,"byte_end":31467,"line_start":130,"line_end":130,"column_start":1,"column_end":19}},{"value":"/     x: f32,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31468,"byte_end":31483,"line_start":131,"line_end":131,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31484,"byte_end":31489,"line_start":132,"line_end":132,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31490,"byte_end":31493,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ impl Distribution<MyF32> for Standard {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31494,"byte_end":31537,"line_start":134,"line_end":134,"column_start":1,"column_end":44}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31538,"byte_end":31603,"line_start":135,"line_end":135,"column_start":1,"column_end":66}},{"value":"/         MyF32 { x: rng.gen() }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31604,"byte_end":31638,"line_start":136,"line_end":136,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31639,"byte_end":31648,"line_start":137,"line_end":137,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31649,"byte_end":31654,"line_start":138,"line_end":138,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31655,"byte_end":31662,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31663,"byte_end":31666,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31667,"byte_end":31670,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31671,"byte_end":31757,"line_start":142,"line_end":142,"column_start":1,"column_end":87}},{"value":"/ [`gen_range`]: Rng::gen_range","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31758,"byte_end":31791,"line_start":143,"line_end":143,"column_start":1,"column_end":34}},{"value":"/ [`gen`]: Rng::gen","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31792,"byte_end":31813,"line_start":144,"line_end":144,"column_start":1,"column_end":22}},{"value":"/ [`sample`]: Rng::sample","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31814,"byte_end":31841,"line_start":145,"line_end":145,"column_start":1,"column_end":28}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31842,"byte_end":31887,"line_start":146,"line_end":146,"column_start":1,"column_end":46}},{"value":"/ [`Alphanumeric`]: distributions::Alphanumeric","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31888,"byte_end":31937,"line_start":147,"line_end":147,"column_start":1,"column_end":50}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31938,"byte_end":31981,"line_start":148,"line_end":148,"column_start":1,"column_end":44}},{"value":"/ [`Beta`]: distributions::Beta","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":31982,"byte_end":32015,"line_start":149,"line_end":149,"column_start":1,"column_end":34}},{"value":"/ [`Binomial`]: distributions::Binomial","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32016,"byte_end":32057,"line_start":150,"line_end":150,"column_start":1,"column_end":42}},{"value":"/ [`Cauchy`]: distributions::Cauchy","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32058,"byte_end":32095,"line_start":151,"line_end":151,"column_start":1,"column_end":38}},{"value":"/ [`ChiSquared`]: distributions::ChiSquared","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32096,"byte_end":32141,"line_start":152,"line_end":152,"column_start":1,"column_end":46}},{"value":"/ [`Dirichlet`]: distributions::Dirichlet","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32142,"byte_end":32185,"line_start":153,"line_end":153,"column_start":1,"column_end":44}},{"value":"/ [`Exp`]: distributions::Exp","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32186,"byte_end":32217,"line_start":154,"line_end":154,"column_start":1,"column_end":32}},{"value":"/ [`Exp1`]: distributions::Exp1","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32218,"byte_end":32251,"line_start":155,"line_end":155,"column_start":1,"column_end":34}},{"value":"/ [`FisherF`]: distributions::FisherF","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32252,"byte_end":32291,"line_start":156,"line_end":156,"column_start":1,"column_end":40}},{"value":"/ [`Gamma`]: distributions::Gamma","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32292,"byte_end":32327,"line_start":157,"line_end":157,"column_start":1,"column_end":36}},{"value":"/ [`LogNormal`]: distributions::LogNormal","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32328,"byte_end":32371,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/ [`Normal`]: distributions::Normal","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32372,"byte_end":32409,"line_start":159,"line_end":159,"column_start":1,"column_end":38}},{"value":"/ [`Open01`]: distributions::Open01","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32410,"byte_end":32447,"line_start":160,"line_end":160,"column_start":1,"column_end":38}},{"value":"/ [`OpenClosed01`]: distributions::OpenClosed01","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32448,"byte_end":32497,"line_start":161,"line_end":161,"column_start":1,"column_end":50}},{"value":"/ [`Pareto`]: distributions::Pareto","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32498,"byte_end":32535,"line_start":162,"line_end":162,"column_start":1,"column_end":38}},{"value":"/ [`Poisson`]: distributions::Poisson","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32536,"byte_end":32575,"line_start":163,"line_end":163,"column_start":1,"column_end":40}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32576,"byte_end":32617,"line_start":164,"line_end":164,"column_start":1,"column_end":42}},{"value":"/ [`StandardNormal`]: distributions::StandardNormal","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32618,"byte_end":32671,"line_start":165,"line_end":165,"column_start":1,"column_end":54}},{"value":"/ [`StudentT`]: distributions::StudentT","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32672,"byte_end":32713,"line_start":166,"line_end":166,"column_start":1,"column_end":42}},{"value":"/ [`Triangular`]: distributions::Triangular","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32714,"byte_end":32759,"line_start":167,"line_end":167,"column_start":1,"column_end":46}},{"value":"/ [`Uniform`]: distributions::Uniform","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32760,"byte_end":32799,"line_start":168,"line_end":168,"column_start":1,"column_end":40}},{"value":"/ [`Uniform::new`]: distributions::Uniform::new","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32800,"byte_end":32849,"line_start":169,"line_end":169,"column_start":1,"column_end":50}},{"value":"/ [`Uniform::new_inclusive`]: distributions::Uniform::new_inclusive","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32850,"byte_end":32919,"line_start":170,"line_end":170,"column_start":1,"column_end":70}},{"value":"/ [`UnitSphereSurface`]: distributions::UnitSphereSurface","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32920,"byte_end":32979,"line_start":171,"line_end":171,"column_start":1,"column_end":60}},{"value":"/ [`UnitCircle`]: distributions::UnitCircle","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":32980,"byte_end":33025,"line_start":172,"line_end":172,"column_start":1,"column_end":46}},{"value":"/ [`Weibull`]: distributions::Weibull","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33026,"byte_end":33065,"line_start":173,"line_end":173,"column_start":1,"column_end":40}},{"value":"/ [`WeightedIndex`]: distributions::WeightedIndex","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33066,"byte_end":33117,"line_start":174,"line_end":174,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":821},{"krate":0,"index":824},{"krate":0,"index":827},{"krate":0,"index":829},{"krate":0,"index":85},{"krate":0,"index":93},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":832},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":129},{"krate":0,"index":845},{"krate":0,"index":847},{"krate":0,"index":861},{"krate":0,"index":863},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":909},{"krate":0,"index":911},{"krate":0,"index":925},{"krate":0,"index":927},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":957},{"krate":0,"index":959},{"krate":0,"index":973},{"krate":0,"index":975},{"krate":0,"index":989},{"krate":0,"index":991},{"krate":0,"index":1005},{"krate":0,"index":1007},{"krate":0,"index":1021},{"krate":0,"index":1023},{"krate":0,"index":1037},{"krate":0,"index":1041},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":130},{"krate":0,"index":1049},{"krate":0,"index":1051},{"krate":0,"index":1065},{"krate":0,"index":1067},{"krate":0,"index":1081},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1089},{"krate":0,"index":1099},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":131},{"krate":0,"index":133}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[{"value":"/ A distribution uniformly sampling numbers within a given range.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49289,"byte_end":49356,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49357,"byte_end":49360,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`] is the standard distribution to sample uniformly from a range;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49361,"byte_end":49439,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49440,"byte_end":49519,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ standard die. [`Rng::gen_range`] supports any type supported by","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49520,"byte_end":49587,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ [`Uniform`].","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49588,"byte_end":49604,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49605,"byte_end":49608,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This distribution is provided with support for several primitive types","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49609,"byte_end":49683,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (all integer and floating-point types) as well as [`std::time::Duration`],","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49684,"byte_end":49762,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ and supports extension to user-defined types via a type-specific *back-end*","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49763,"byte_end":49842,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ implementation.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49843,"byte_end":49862,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49863,"byte_end":49866,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49867,"byte_end":49945,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ back-ends supporting sampling from primitive integer and floating-point","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":49946,"byte_end":50021,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ ranges as well as from [`std::time::Duration`]; these types do not normally","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50022,"byte_end":50101,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ need to be used directly (unless implementing a derived back-end).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50102,"byte_end":50172,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50173,"byte_end":50176,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example usage","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50177,"byte_end":50196,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50197,"byte_end":50200,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50201,"byte_end":50208,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50209,"byte_end":50241,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50242,"byte_end":50279,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50280,"byte_end":50283,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50284,"byte_end":50315,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ let side = Uniform::new(-10.0, 10.0);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50316,"byte_end":50357,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50358,"byte_end":50361,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // sample between 1 and 10 points","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50362,"byte_end":50399,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/ for _ in 0..rng.gen_range(1, 11) {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50400,"byte_end":50438,"line_start":37,"line_end":37,"column_start":1,"column_end":39}},{"value":"/     // sample a point from the square with sides -10 - 10 in two dimensions","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50439,"byte_end":50518,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/     let (x, y) = (rng.sample(side), rng.sample(side));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50519,"byte_end":50577,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"/     println!(\"Point: {}, {}\", x, y);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50578,"byte_end":50618,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50619,"byte_end":50624,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50625,"byte_end":50632,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50633,"byte_end":50636,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Extending `Uniform` to support a custom type","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50637,"byte_end":50687,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50688,"byte_end":50691,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ To extend [`Uniform`] to support your own types, write a back-end which","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50692,"byte_end":50767,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50768,"byte_end":50849,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"/ helper trait to \"register\" your back-end. See the `MyF32` example below.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50850,"byte_end":50926,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50927,"byte_end":50930,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ At a minimum, the back-end needs to store any parameters needed for sampling","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":50931,"byte_end":51011,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/ (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51012,"byte_end":51090,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ Those methods should include an assert to check the range is valid (i.e.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51091,"byte_end":51167,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ `low < high`). The example below merely wraps another back-end.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51168,"byte_end":51235,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51236,"byte_end":51239,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The `new`, `new_inclusive` and `sample_single` functions use arguments of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51240,"byte_end":51317,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ type SampleBorrow<X> in order to support passing in values by reference or","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51318,"byte_end":51396,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ by value. In the implementation of these functions, you can choose to","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51397,"byte_end":51470,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ simply use the reference returned by [`SampleBorrow::borrow`], or you can choose","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51471,"byte_end":51555,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"/ to copy or clone the value, whatever is appropriate for your type.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51556,"byte_end":51626,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51627,"byte_end":51630,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51631,"byte_end":51638,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51639,"byte_end":51664,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::uniform::{Uniform, SampleUniform,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51665,"byte_end":51727,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/         UniformSampler, UniformFloat, SampleBorrow};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51728,"byte_end":51784,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51785,"byte_end":51788,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ struct MyF32(f32);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51789,"byte_end":51811,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51812,"byte_end":51815,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone, Copy, Debug)]","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51816,"byte_end":51849,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/ struct UniformMyF32 {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51850,"byte_end":51875,"line_start":69,"line_end":69,"column_start":1,"column_end":26}},{"value":"/     inner: UniformFloat<f32>,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51876,"byte_end":51909,"line_start":70,"line_end":70,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51910,"byte_end":51915,"line_start":71,"line_end":71,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51916,"byte_end":51919,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ impl UniformSampler for UniformMyF32 {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51920,"byte_end":51962,"line_start":73,"line_end":73,"column_start":1,"column_end":43}},{"value":"/     type X = MyF32;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51963,"byte_end":51986,"line_start":74,"line_end":74,"column_start":1,"column_end":24}},{"value":"/     fn new<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":51987,"byte_end":52036,"line_start":75,"line_end":75,"column_start":1,"column_end":50}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52037,"byte_end":52089,"line_start":76,"line_end":76,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52090,"byte_end":52141,"line_start":77,"line_end":77,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52142,"byte_end":52151,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"/         UniformMyF32 {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52152,"byte_end":52178,"line_start":79,"line_end":79,"column_start":1,"column_end":27}},{"value":"/             inner: UniformFloat::<f32>::new(low.borrow().0, high.borrow().0),","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52179,"byte_end":52260,"line_start":80,"line_end":80,"column_start":1,"column_end":82}},{"value":"/         }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52261,"byte_end":52274,"line_start":81,"line_end":81,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52275,"byte_end":52284,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"/     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52285,"byte_end":52344,"line_start":83,"line_end":83,"column_start":1,"column_end":60}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52345,"byte_end":52397,"line_start":84,"line_end":84,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52398,"byte_end":52449,"line_start":85,"line_end":85,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52450,"byte_end":52459,"line_start":86,"line_end":86,"column_start":1,"column_end":10}},{"value":"/         UniformSampler::new(low, high)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52460,"byte_end":52502,"line_start":87,"line_end":87,"column_start":1,"column_end":43}},{"value":"/     }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52503,"byte_end":52512,"line_start":88,"line_end":88,"column_start":1,"column_end":10}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52513,"byte_end":52580,"line_start":89,"line_end":89,"column_start":1,"column_end":68}},{"value":"/         MyF32(self.inner.sample(rng))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52581,"byte_end":52622,"line_start":90,"line_end":90,"column_start":1,"column_end":42}},{"value":"/     }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52623,"byte_end":52632,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52633,"byte_end":52638,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52639,"byte_end":52642,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ impl SampleUniform for MyF32 {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52643,"byte_end":52677,"line_start":94,"line_end":94,"column_start":1,"column_end":35}},{"value":"/     type Sampler = UniformMyF32;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52678,"byte_end":52714,"line_start":95,"line_end":95,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52715,"byte_end":52720,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52721,"byte_end":52724,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52725,"byte_end":52780,"line_start":98,"line_end":98,"column_start":1,"column_end":56}},{"value":"/ let uniform = Uniform::new(low, high);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52781,"byte_end":52823,"line_start":99,"line_end":99,"column_start":1,"column_end":43}},{"value":"/ let x = uniform.sample(&mut thread_rng());","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52824,"byte_end":52870,"line_start":100,"line_end":100,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52871,"byte_end":52878,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52879,"byte_end":52882,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ [`SampleUniform`]: crate::distributions::uniform::SampleUniform","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52883,"byte_end":52950,"line_start":103,"line_end":103,"column_start":1,"column_end":68}},{"value":"/ [`UniformSampler`]: crate::distributions::uniform::UniformSampler","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":52951,"byte_end":53020,"line_start":104,"line_end":104,"column_start":1,"column_end":70}},{"value":"/ [`UniformInt`]: crate::distributions::uniform::UniformInt","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":53021,"byte_end":53082,"line_start":105,"line_end":105,"column_start":1,"column_end":62}},{"value":"/ [`UniformFloat`]: crate::distributions::uniform::UniformFloat","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":53083,"byte_end":53148,"line_start":106,"line_end":106,"column_start":1,"column_end":66}},{"value":"/ [`UniformDuration`]: crate::distributions::uniform::UniformDuration","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":53149,"byte_end":53220,"line_start":107,"line_end":107,"column_start":1,"column_end":72}},{"value":"/ [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":53221,"byte_end":53302,"line_start":108,"line_end":108,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55432,"byte_end":55439,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"Uniform {  }","parent":null,"children":[{"krate":0,"index":823}],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":53785,"byte_end":53832,"line_start":128,"line_end":128,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":53833,"byte_end":53836,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":53837,"byte_end":53908,"line_start":130,"line_end":130,"column_start":1,"column_end":72}},{"value":"/ distribution sampling from the given range; these functions may do extra","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":53909,"byte_end":53985,"line_start":131,"line_end":131,"column_start":1,"column_end":77}},{"value":"/ work up front to make sampling of multiple values faster.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":53986,"byte_end":54047,"line_start":132,"line_end":132,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54048,"byte_end":54051,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ When sampling from a constant range, many calculations can happen at","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54052,"byte_end":54124,"line_start":134,"line_end":134,"column_start":1,"column_end":73}},{"value":"/ compile-time and all methods should be fast; for floating-point ranges and","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54125,"byte_end":54203,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/ the full range of integer types this should have comparable performance to","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54204,"byte_end":54282,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"/ the `Standard` distribution.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54283,"byte_end":54315,"line_start":137,"line_end":137,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54316,"byte_end":54319,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54320,"byte_end":54385,"line_start":139,"line_end":139,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `rng.gen::<u8>() % 170` samples from the range","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54386,"byte_end":54465,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/ `[0, 169]` but is twice as likely to select numbers less than 85 than other","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54466,"byte_end":54545,"line_start":141,"line_end":141,"column_start":1,"column_end":80}},{"value":"/ values. Further, the implementations here give more weight to the high-bits","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54546,"byte_end":54625,"line_start":142,"line_end":142,"column_start":1,"column_end":80}},{"value":"/ generated by the RNG than the low bits, since with some RNGs the low-bits","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54626,"byte_end":54703,"line_start":143,"line_end":143,"column_start":1,"column_end":78}},{"value":"/ are of lower quality than the high bits.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54704,"byte_end":54748,"line_start":144,"line_end":144,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54749,"byte_end":54752,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ Implementations must sample in `[low, high)` range for","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54753,"byte_end":54811,"line_start":146,"line_end":146,"column_start":1,"column_end":59}},{"value":"/ `Uniform::new(low, high)`, i.e., excluding `high`. In particular care must","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54812,"byte_end":54890,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/ be taken to ensure that rounding never results values `< low` or `>= high`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54891,"byte_end":54970,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54971,"byte_end":54974,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54975,"byte_end":54988,"line_start":150,"line_end":150,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54989,"byte_end":54992,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":54993,"byte_end":55000,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55001,"byte_end":55054,"line_start":153,"line_end":153,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55055,"byte_end":55058,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55059,"byte_end":55074,"line_start":155,"line_end":155,"column_start":1,"column_end":16}},{"value":"/     let between = Uniform::from(10..10000);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55075,"byte_end":55122,"line_start":156,"line_end":156,"column_start":1,"column_end":48}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55123,"byte_end":55164,"line_start":157,"line_end":157,"column_start":1,"column_end":42}},{"value":"/     let mut sum = 0;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55165,"byte_end":55189,"line_start":158,"line_end":158,"column_start":1,"column_end":25}},{"value":"/     for _ in 0..1000 {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55190,"byte_end":55216,"line_start":159,"line_end":159,"column_start":1,"column_end":27}},{"value":"/         sum += between.sample(&mut rng);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55217,"byte_end":55261,"line_start":160,"line_end":160,"column_start":1,"column_end":45}},{"value":"/     }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55262,"byte_end":55271,"line_start":161,"line_end":161,"column_start":1,"column_end":10}},{"value":"/     println!(\"{}\", sum);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55272,"byte_end":55300,"line_start":162,"line_end":162,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55301,"byte_end":55306,"line_start":163,"line_end":163,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55307,"byte_end":55314,"line_start":164,"line_end":164,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55315,"byte_end":55318,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ [`new`]: Uniform::new","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55319,"byte_end":55344,"line_start":166,"line_end":166,"column_start":1,"column_end":26}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55345,"byte_end":55390,"line_start":167,"line_end":167,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55689,"byte_end":55692,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"pub fn new<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> + Sized,\nB2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the half","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55526,"byte_end":55599,"line_start":174,"line_end":174,"column_start":5,"column_end":78}},{"value":"/ open range `[low, high)` (excluding `high`). Panics if `low >= high`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55604,"byte_end":55677,"line_start":175,"line_end":175,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56042,"byte_end":56055,"line_start":185,"line_end":185,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> +\nSized, B2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the closed","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55890,"byte_end":55965,"line_start":183,"line_end":183,"column_start":5,"column_end":80}},{"value":"/ range `[low, high]` (inclusive). Panics if `low > high`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55970,"byte_end":56030,"line_start":184,"line_end":184,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56716,"byte_end":56729,"line_start":206,"line_end":206,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":98}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[{"value":"/ Helper trait for creating objects using the correct implementation of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56415,"byte_end":56488,"line_start":199,"line_end":199,"column_start":1,"column_end":74}},{"value":"/ [`UniformSampler`] for the sampling type.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56489,"byte_end":56534,"line_start":200,"line_end":200,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56535,"byte_end":56538,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56539,"byte_end":56611,"line_start":202,"line_end":202,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56612,"byte_end":56643,"line_start":203,"line_end":203,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56644,"byte_end":56647,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56648,"byte_end":56705,"line_start":205,"line_end":205,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56813,"byte_end":56820,"line_start":208,"line_end":208,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[{"value":"/ The `UniformSampler` implementation supporting type `X`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56743,"byte_end":56803,"line_start":207,"line_end":207,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57295,"byte_end":57309,"line_start":221,"line_end":221,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":109}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[{"value":"/ Helper trait handling actual uniform sampling.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56851,"byte_end":56901,"line_start":211,"line_end":211,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56902,"byte_end":56905,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56906,"byte_end":56978,"line_start":213,"line_end":213,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56979,"byte_end":57010,"line_start":214,"line_end":214,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57011,"byte_end":57014,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`sample_single`] is optional, and is only useful when","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57015,"byte_end":57091,"line_start":216,"line_end":216,"column_start":1,"column_end":77}},{"value":"/ the implementation can be faster than `Self::new(low, high).sample(rng)`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57092,"byte_end":57169,"line_start":217,"line_end":217,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57170,"byte_end":57173,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57174,"byte_end":57231,"line_start":219,"line_end":219,"column_start":1,"column_end":58}},{"value":"/ [`sample_single`]: UniformSampler::sample_single","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57232,"byte_end":57284,"line_start":220,"line_end":220,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57377,"byte_end":57378,"line_start":223,"line_end":223,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[{"value":"/ The type sampled by this implementation.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57323,"byte_end":57367,"line_start":222,"line_end":222,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57641,"byte_end":57644,"line_start":230,"line_end":230,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"pub fn new<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive lower bound and exclusive upper bound","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57385,"byte_end":57457,"line_start":225,"line_end":225,"column_start":5,"column_end":77}},{"value":"/ `[low, high)`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57462,"byte_end":57480,"line_start":226,"line_end":226,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57485,"byte_end":57488,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57493,"byte_end":57556,"line_start":228,"line_end":228,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new`, which asserts that `low < high` before calling this.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57561,"byte_end":57633,"line_start":229,"line_end":229,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58019,"byte_end":58032,"line_start":239,"line_end":239,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> +\nSized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive bounds `[low, high]`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57783,"byte_end":57839,"line_start":234,"line_end":234,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57844,"byte_end":57847,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57852,"byte_end":57915,"line_start":236,"line_end":236,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new_inclusive`, which asserts that `low <= high` before","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57920,"byte_end":57989,"line_start":237,"line_end":237,"column_start":5,"column_end":74}},{"value":"/ calling this.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57994,"byte_end":58011,"line_start":238,"line_end":238,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58198,"byte_end":58204,"line_start":244,"line_end":244,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> Self::X","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[{"value":"/ Sample a value.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58171,"byte_end":58190,"line_start":243,"line_end":243,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58816,"byte_end":58829,"line_start":257,"line_end":257,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"pub fn sample_single<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R) -> Self::X where\nB1: SampleBorrow<Self::X> + Sized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58259,"byte_end":58334,"line_start":246,"line_end":246,"column_start":5,"column_end":80}},{"value":"/ and exclusive upper bound `[low, high)`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58339,"byte_end":58383,"line_start":247,"line_end":247,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58388,"byte_end":58391,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58396,"byte_end":58459,"line_start":249,"line_end":249,"column_start":5,"column_end":68}},{"value":"/ `Uniform::sample_single`, which asserts that `low < high` before calling","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58464,"byte_end":58540,"line_start":250,"line_end":250,"column_start":5,"column_end":81}},{"value":"/ this.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58545,"byte_end":58554,"line_start":251,"line_end":251,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58559,"byte_end":58562,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Via this method, implementations can provide a method optimized for","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58567,"byte_end":58638,"line_start":253,"line_end":253,"column_start":5,"column_end":76}},{"value":"/ sampling only a single value from the specified range. The default","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58643,"byte_end":58713,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/ implementation simply calls `UniformSampler::new` then `sample` on the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58718,"byte_end":58792,"line_start":255,"line_end":255,"column_start":5,"column_end":79}},{"value":"/ result.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58797,"byte_end":58808,"line_start":256,"line_end":256,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59699,"byte_end":59711,"line_start":285,"line_end":285,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":121}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[{"value":"/ Helper trait similar to [`Borrow`] but implemented","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59493,"byte_end":59547,"line_start":280,"line_end":280,"column_start":1,"column_end":55}},{"value":"/ only for SampleUniform and references to SampleUniform in","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59548,"byte_end":59609,"line_start":281,"line_end":281,"column_start":1,"column_end":62}},{"value":"/ order to resolve ambiguity issues.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59610,"byte_end":59648,"line_start":282,"line_end":282,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59649,"byte_end":59652,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ [`Borrow`]: std::borrow::Borrow","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59653,"byte_end":59688,"line_start":284,"line_end":284,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59865,"byte_end":59871,"line_start":289,"line_end":289,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"pub fn borrow(&Self) -> &Borrowed","parent":{"krate":0,"index":119},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[{"value":"/ Immutably borrows from an owned value. See [`Borrow::borrow`]","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59728,"byte_end":59793,"line_start":286,"line_end":286,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59798,"byte_end":59801,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ [`Borrow::borrow`]: std::borrow::Borrow::borrow","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59806,"byte_end":59857,"line_start":288,"line_end":288,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":832},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":62425,"byte_end":62435,"line_start":342,"line_end":342,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for integer types.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60323,"byte_end":60390,"line_start":305,"line_end":305,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60391,"byte_end":60394,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60395,"byte_end":60474,"line_start":307,"line_end":307,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60475,"byte_end":60532,"line_start":308,"line_end":308,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60533,"byte_end":60536,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60537,"byte_end":60563,"line_start":310,"line_end":310,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60564,"byte_end":60567,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ For a closed range, the number of possible numbers we should generate is","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60568,"byte_end":60644,"line_start":312,"line_end":312,"column_start":1,"column_end":77}},{"value":"/ `range = (high - low + 1)`. It is not possible to end up with a uniform","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60645,"byte_end":60720,"line_start":313,"line_end":313,"column_start":1,"column_end":76}},{"value":"/ distribution if we map *all* the random integers that can be generated to","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60721,"byte_end":60798,"line_start":314,"line_end":314,"column_start":1,"column_end":78}},{"value":"/ this range. We have to map integers from a `zone` that is a multiple of the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60799,"byte_end":60878,"line_start":315,"line_end":315,"column_start":1,"column_end":80}},{"value":"/ range. The rest of the integers, that cause a bias, are rejected.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60879,"byte_end":60948,"line_start":316,"line_end":316,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60949,"byte_end":60952,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ The problem with `range` is that to cover the full range of the type, it has","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":60953,"byte_end":61033,"line_start":318,"line_end":318,"column_start":1,"column_end":81}},{"value":"/ to store `unsigned_max + 1`, which can't be represented. But if the range","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61034,"byte_end":61111,"line_start":319,"line_end":319,"column_start":1,"column_end":78}},{"value":"/ covers the full range of the type, no modulus is needed. A range of size 0","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61112,"byte_end":61190,"line_start":320,"line_end":320,"column_start":1,"column_end":79}},{"value":"/ can't exist, so we use that to represent this special case. Wrapping","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61191,"byte_end":61263,"line_start":321,"line_end":321,"column_start":1,"column_end":73}},{"value":"/ arithmetic even makes representing `unsigned_max + 1` as 0 simple.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61264,"byte_end":61334,"line_start":322,"line_end":322,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61335,"byte_end":61338,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ We don't calculate `zone` directly, but first calculate the number of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61339,"byte_end":61412,"line_start":324,"line_end":324,"column_start":1,"column_end":74}},{"value":"/ integers to reject. To handle `unsigned_max + 1` not fitting in the type,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61413,"byte_end":61490,"line_start":325,"line_end":325,"column_start":1,"column_end":78}},{"value":"/ we use:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61491,"byte_end":61502,"line_start":326,"line_end":326,"column_start":1,"column_end":12}},{"value":"/ `ints_to_reject = (unsigned_max + 1) % range;`","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61503,"byte_end":61553,"line_start":327,"line_end":327,"column_start":1,"column_end":51}},{"value":"/ `ints_to_reject = (unsigned_max - range + 1) % range;`","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61554,"byte_end":61612,"line_start":328,"line_end":328,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61613,"byte_end":61616,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ The smallest integer PRNGs generate is `u32`. That is why for small integer","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61617,"byte_end":61696,"line_start":330,"line_end":330,"column_start":1,"column_end":80}},{"value":"/ sizes (`i8`/`u8` and `i16`/`u16`) there is an optimization: don't pick the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61697,"byte_end":61775,"line_start":331,"line_end":331,"column_start":1,"column_end":79}},{"value":"/ largest zone that can fit in the small type, but pick the largest zone that","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61776,"byte_end":61855,"line_start":332,"line_end":332,"column_start":1,"column_end":80}},{"value":"/ can fit in an `u32`. `ints_to_reject` is always less than half the size of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61856,"byte_end":61934,"line_start":333,"line_end":333,"column_start":1,"column_end":79}},{"value":"/ the small integer. This means the first bit of `zone` is always 1, and so","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":61935,"byte_end":62012,"line_start":334,"line_end":334,"column_start":1,"column_end":78}},{"value":"/ are all the other preceding bits of a larger integer. The easiest way to","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":62013,"byte_end":62089,"line_start":335,"line_end":335,"column_start":1,"column_end":77}},{"value":"/ grow the `zone` for the larger type is to simply sign extend it.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":62090,"byte_end":62158,"line_start":336,"line_end":336,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":62159,"byte_end":62162,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ An alternative to using a modulus is widening multiply: After a widening","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":62163,"byte_end":62239,"line_start":338,"line_end":338,"column_start":1,"column_end":77}},{"value":"/ multiply by `range`, the result is in the high word. Then comparing the low","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":62240,"byte_end":62319,"line_start":339,"line_end":339,"column_start":1,"column_end":80}},{"value":"/ word against `zone` makes sure our distribution is uniform.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":62320,"byte_end":62383,"line_start":340,"line_end":340,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1037},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74801,"byte_end":74813,"line_start":643,"line_end":643,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":1039},{"krate":0,"index":1040}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for floating-point types.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":73875,"byte_end":73949,"line_start":623,"line_end":623,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":73950,"byte_end":73953,"line_start":624,"line_end":624,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":73954,"byte_end":74033,"line_start":625,"line_end":625,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74034,"byte_end":74091,"line_start":626,"line_end":626,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74092,"byte_end":74095,"line_start":627,"line_end":627,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74096,"byte_end":74122,"line_start":628,"line_end":628,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74123,"byte_end":74126,"line_start":629,"line_end":629,"column_start":1,"column_end":4}},{"value":"/ Instead of generating a float in the `[0, 1)` range using [`Standard`], the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74127,"byte_end":74206,"line_start":630,"line_end":630,"column_start":1,"column_end":80}},{"value":"/ `UniformFloat` implementation converts the output of an PRNG itself. This","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74207,"byte_end":74284,"line_start":631,"line_end":631,"column_start":1,"column_end":78}},{"value":"/ way one or two steps can be optimized out.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74285,"byte_end":74331,"line_start":632,"line_end":632,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74332,"byte_end":74335,"line_start":633,"line_end":633,"column_start":1,"column_end":4}},{"value":"/ The floats are first converted to a value in the `[1, 2)` interval using a","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74336,"byte_end":74414,"line_start":634,"line_end":634,"column_start":1,"column_end":79}},{"value":"/ transmute-based method, and then mapped to the expected range with a","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74415,"byte_end":74487,"line_start":635,"line_end":635,"column_start":1,"column_end":73}},{"value":"/ multiply and addition. Values produced this way have what equals 22 bits of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74488,"byte_end":74567,"line_start":636,"line_end":636,"column_start":1,"column_end":80}},{"value":"/ random digits for an `f32`, and 52 for an `f64`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74568,"byte_end":74620,"line_start":637,"line_end":637,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74621,"byte_end":74624,"line_start":638,"line_end":638,"column_start":1,"column_end":4}},{"value":"/ [`new`]: UniformSampler::new","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74625,"byte_end":74657,"line_start":639,"line_end":639,"column_start":1,"column_end":33}},{"value":"/ [`new_inclusive`]: UniformSampler::new_inclusive","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74658,"byte_end":74710,"line_start":640,"line_end":640,"column_start":1,"column_end":53}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74711,"byte_end":74759,"line_start":641,"line_end":641,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1081},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":82802,"byte_end":82817,"line_start":826,"line_end":826,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":1082},{"krate":0,"index":1083}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `Duration`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":82512,"byte_end":82576,"line_start":820,"line_end":820,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":82577,"byte_end":82580,"line_start":821,"line_end":821,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own types, this type","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":82581,"byte_end":82661,"line_start":822,"line_end":822,"column_start":1,"column_end":81}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":82662,"byte_end":82719,"line_start":823,"line_end":823,"column_start":1,"column_end":58}},{"value":"cfg(any(feature = \"std\", rustc_1_25))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":82720,"byte_end":82760,"line_start":824,"line_end":824,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1104},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100931,"byte_end":100940,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":1105}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"/ The Bernoulli distribution.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100362,"byte_end":100393,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100394,"byte_end":100397,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This is a special case of the Binomial distribution where `n = 1`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100398,"byte_end":100468,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100469,"byte_end":100472,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100473,"byte_end":100486,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100487,"byte_end":100490,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100491,"byte_end":100502,"line_start":20,"line_end":20,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Bernoulli, Distribution};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100503,"byte_end":100558,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100559,"byte_end":100562,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let d = Bernoulli::new(0.3);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100563,"byte_end":100595,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ let v = d.sample(&mut rand::thread_rng());","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100596,"byte_end":100642,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/ println!(\"{} is from a Bernoulli distribution\", v);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100643,"byte_end":100698,"line_start":25,"line_end":25,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100699,"byte_end":100706,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100707,"byte_end":100710,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Precision","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100711,"byte_end":100726,"line_start":28,"line_end":28,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100727,"byte_end":100730,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100731,"byte_end":100801,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ so only probabilities that are multiples of 2<sup>-64</sup> can be","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100802,"byte_end":100872,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ represented.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100873,"byte_end":100889,"line_start":32,"line_end":32,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102867,"byte_end":102870,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"pub fn new(f64) -> Bernoulli","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the given probability of success `p`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102284,"byte_end":102358,"line_start":65,"line_end":65,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102363,"byte_end":102366,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102371,"byte_end":102383,"line_start":67,"line_end":67,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102388,"byte_end":102391,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102396,"byte_end":102422,"line_start":69,"line_end":69,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102427,"byte_end":102430,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # Precision","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102435,"byte_end":102450,"line_start":71,"line_end":71,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102455,"byte_end":102458,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ For `p = 1.0`, the resulting distribution will always generate true.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102463,"byte_end":102535,"line_start":73,"line_end":73,"column_start":5,"column_end":77}},{"value":"/ For `p = 0.0`, the resulting distribution will always generate false.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102540,"byte_end":102613,"line_start":74,"line_end":74,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102618,"byte_end":102621,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ This method is accurate for any input `p` in the range `[0, 1]` which is","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102626,"byte_end":102702,"line_start":76,"line_end":76,"column_start":5,"column_end":81}},{"value":"/ a multiple of 2<sup>-64</sup>. (Note that not all multiples of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102707,"byte_end":102773,"line_start":77,"line_end":77,"column_start":5,"column_end":71}},{"value":"/ 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102778,"byte_end":102841,"line_start":78,"line_end":78,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102846,"byte_end":102855,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103641,"byte_end":103651,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"pub fn from_ratio(u32, u32) -> Bernoulli","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the probability of success of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103134,"byte_end":103200,"line_start":88,"line_end":88,"column_start":5,"column_end":71}},{"value":"/ `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103205,"byte_end":103273,"line_start":89,"line_end":89,"column_start":5,"column_end":73}},{"value":"/ a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103278,"byte_end":103352,"line_start":90,"line_end":90,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103357,"byte_end":103360,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ If `numerator == denominator` then the returned `Bernoulli` will always","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103365,"byte_end":103440,"line_start":92,"line_end":92,"column_start":5,"column_end":80}},{"value":"/ return `true`. If `numerator == 0` it will always return `false`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103445,"byte_end":103514,"line_start":93,"line_end":93,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103519,"byte_end":103522,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103527,"byte_end":103539,"line_start":95,"line_end":95,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103544,"byte_end":103547,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103552,"byte_end":103607,"line_start":97,"line_end":97,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103612,"byte_end":103615,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103620,"byte_end":103629,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1111},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107127,"byte_end":107139,"line_start":43,"line_end":43,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the half-open","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106174,"byte_end":106252,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ interval `(0, 1]`, i.e. including 1 but not 0.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106253,"byte_end":106303,"line_start":19,"line_end":19,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106304,"byte_end":106307,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106308,"byte_end":106382,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ the 23 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106383,"byte_end":106460,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106461,"byte_end":106534,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ multiplicative method.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106535,"byte_end":106561,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106562,"byte_end":106565,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106566,"byte_end":106632,"line_start":26,"line_end":26,"column_start":1,"column_end":67}},{"value":"/ which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106633,"byte_end":106709,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106710,"byte_end":106721,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106722,"byte_end":106725,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106726,"byte_end":106739,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106740,"byte_end":106747,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106748,"byte_end":106780,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::OpenClosed01;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106781,"byte_end":106823,"line_start":33,"line_end":33,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106824,"byte_end":106827,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(OpenClosed01);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106828,"byte_end":106881,"line_start":35,"line_end":35,"column_start":1,"column_end":54}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106882,"byte_end":106923,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106924,"byte_end":106931,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106932,"byte_end":106935,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106936,"byte_end":106984,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/ [`Open01`]: crate::distributions::Open01","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":106985,"byte_end":107029,"line_start":40,"line_end":40,"column_start":1,"column_end":45}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107030,"byte_end":107085,"line_start":41,"line_end":41,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1118},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":108070,"byte_end":108076,"line_start":69,"line_end":69,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the open","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107142,"byte_end":107215,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/ interval `(0, 1)`, i.e. not including either endpoint.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107216,"byte_end":107274,"line_start":46,"line_end":46,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107275,"byte_end":107278,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε + ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107279,"byte_end":107358,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/ the 22 most significant random bits of an `u32` are used, for `f64` 52 from","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107359,"byte_end":107438,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/ an `u64`. The conversion uses a transmute-based method.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107439,"byte_end":107498,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107499,"byte_end":107502,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107503,"byte_end":107575,"line_start":52,"line_end":52,"column_start":1,"column_end":73}},{"value":"/ which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107576,"byte_end":107652,"line_start":53,"line_end":53,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107653,"byte_end":107664,"line_start":54,"line_end":54,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107665,"byte_end":107668,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107669,"byte_end":107682,"line_start":56,"line_end":56,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107683,"byte_end":107690,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107691,"byte_end":107723,"line_start":58,"line_end":58,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Open01;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107724,"byte_end":107760,"line_start":59,"line_end":59,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107761,"byte_end":107764,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(Open01);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107765,"byte_end":107812,"line_start":61,"line_end":61,"column_start":1,"column_end":48}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107813,"byte_end":107854,"line_start":62,"line_end":62,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107855,"byte_end":107862,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107863,"byte_end":107866,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107867,"byte_end":107915,"line_start":65,"line_end":65,"column_start":1,"column_end":49}},{"value":"/ [`OpenClosed01`]: crate::distributions::OpenClosed01","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107916,"byte_end":107972,"line_start":66,"line_end":66,"column_start":1,"column_end":57}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":107973,"byte_end":108028,"line_start":67,"line_end":67,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":108118,"byte_end":108119,"line_start":73,"line_end":73,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1173},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":122285,"byte_end":122297,"line_start":37,"line_end":37,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `char`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.\n \n # Example","sig":null,"attributes":[{"value":"/ Sample a `char`, uniformly distributed over ASCII letters and numbers:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":121814,"byte_end":121888,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ a-z, A-Z and 0-9.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":121889,"byte_end":121910,"line_start":20,"line_end":20,"column_start":1,"column_end":22}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":121911,"byte_end":121915,"line_start":21,"line_end":21,"column_start":1,"column_end":5}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":121916,"byte_end":121929,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":121930,"byte_end":121933,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":121934,"byte_end":121941,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":121942,"byte_end":121960,"line_start":25,"line_end":25,"column_start":1,"column_end":19}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":121961,"byte_end":121993,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Alphanumeric;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":121994,"byte_end":122036,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":122037,"byte_end":122041,"line_start":28,"line_end":28,"column_start":1,"column_end":5}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":122042,"byte_end":122073,"line_start":29,"line_end":29,"column_start":1,"column_end":32}},{"value":"/ let chars: String = iter::repeat(())","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":122074,"byte_end":122114,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/         .map(|()| rng.sample(Alphanumeric))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":122115,"byte_end":122162,"line_start":31,"line_end":31,"column_start":1,"column_end":48}},{"value":"/         .take(7)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":122163,"byte_end":122183,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/         .collect();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":122184,"byte_end":122207,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ println!(\"Random chars: {}\", chars);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":122208,"byte_end":122248,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":122249,"byte_end":122256,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":128753,"byte_end":128759,"line_start":20,"line_end":20,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":136083,"byte_end":136087,"line_start":233,"line_end":233,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":136602,"byte_end":136606,"line_start":245,"line_end":245,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":136796,"byte_end":136800,"line_start":252,"line_end":252,"column_start":10,"column_end":14},"name":"Bits","qualname":"::distributions::utils::Float::Bits","value":"type Bits;","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35434,"byte_end":35446,"line_start":233,"line_end":233,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":301}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[{"value":"/ Types (distributions) that can be used to create a random instance of `T`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":34778,"byte_end":34856,"line_start":221,"line_end":221,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":34857,"byte_end":34860,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ It is possible to sample from a distribution through both the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":34861,"byte_end":34926,"line_start":223,"line_end":223,"column_start":1,"column_end":66}},{"value":"/ `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":34927,"byte_end":34998,"line_start":224,"line_end":224,"column_start":1,"column_end":72}},{"value":"/ `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":34999,"byte_end":35078,"line_start":225,"line_end":225,"column_start":1,"column_end":80}},{"value":"/ produces an iterator that samples from the distribution.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35079,"byte_end":35139,"line_start":226,"line_end":226,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35140,"byte_end":35143,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ All implementations are expected to be immutable; this has the significant","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35144,"byte_end":35222,"line_start":228,"line_end":228,"column_start":1,"column_end":79}},{"value":"/ advantage of not needing to consider thread safety, and for most","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35223,"byte_end":35291,"line_start":229,"line_end":229,"column_start":1,"column_end":69}},{"value":"/ distributions efficient state-less sampling algorithms are available.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35292,"byte_end":35365,"line_start":230,"line_end":230,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35366,"byte_end":35369,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::method.sample_iter","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35370,"byte_end":35423,"line_start":232,"line_end":232,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35540,"byte_end":35546,"line_start":235,"line_end":235,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> T","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `T`, using `rng` as the source of randomness.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35456,"byte_end":35532,"line_start":234,"line_end":234,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36395,"byte_end":36406,"line_start":261,"line_end":261,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"pub fn sample_iter<'a, R>(&'a Self, &'a mut R) -> DistIter where Self: Sized,\nR: Rng","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[{"value":"/ Create an iterator that generates random values of `T`, using `rng` as","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35595,"byte_end":35669,"line_start":237,"line_end":237,"column_start":5,"column_end":79}},{"value":"/ the source of randomness.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35674,"byte_end":35703,"line_start":238,"line_end":238,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35708,"byte_end":35711,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35716,"byte_end":35729,"line_start":240,"line_end":240,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35734,"byte_end":35737,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35742,"byte_end":35749,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35754,"byte_end":35779,"line_start":243,"line_end":243,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35784,"byte_end":35861,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35866,"byte_end":35869,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35874,"byte_end":35905,"line_start":246,"line_end":246,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35910,"byte_end":35913,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35918,"byte_end":35941,"line_start":248,"line_end":248,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = Standard.sample_iter(&mut rng).take(16).collect();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35946,"byte_end":36018,"line_start":249,"line_end":249,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36023,"byte_end":36026,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36031,"byte_end":36045,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/ let s: String = Alphanumeric.sample_iter(&mut rng).take(7).collect();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36050,"byte_end":36123,"line_start":252,"line_end":252,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36128,"byte_end":36131,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36136,"byte_end":36156,"line_start":254,"line_end":254,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36161,"byte_end":36210,"line_start":255,"line_end":255,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = die_range.sample_iter(&mut rng);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36215,"byte_end":36270,"line_start":256,"line_end":256,"column_start":5,"column_end":60}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36275,"byte_end":36316,"line_start":257,"line_end":257,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36321,"byte_end":36365,"line_start":258,"line_end":258,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36370,"byte_end":36375,"line_start":259,"line_end":259,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36380,"byte_end":36387,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1546},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37116,"byte_end":37124,"line_start":287,"line_end":287,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1551},{"krate":0,"index":1552},{"krate":0,"index":1553}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[{"value":"/ An iterator that generates random values of `T` with distribution `D`,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36799,"byte_end":36873,"line_start":279,"line_end":279,"column_start":1,"column_end":75}},{"value":"/ using `R` as the source of randomness.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36874,"byte_end":36916,"line_start":280,"line_end":280,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36917,"byte_end":36920,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`sample_iter`] method on [`Distribution`].","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36921,"byte_end":37000,"line_start":282,"line_end":282,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37001,"byte_end":37036,"line_start":283,"line_end":283,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37037,"byte_end":37040,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37041,"byte_end":37087,"line_start":285,"line_end":285,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1560},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40498,"byte_end":40506,"line_start":373,"line_end":373,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"/ A generic random value distribution, implemented for many primitive types.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37822,"byte_end":37900,"line_start":317,"line_end":317,"column_start":1,"column_end":79}},{"value":"/ Usually generates values with a numerically uniform distribution, and with a","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37901,"byte_end":37981,"line_start":318,"line_end":318,"column_start":1,"column_end":81}},{"value":"/ range appropriate to the type.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37982,"byte_end":38016,"line_start":319,"line_end":319,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38017,"byte_end":38020,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ ## Built-in Implementations","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38021,"byte_end":38052,"line_start":321,"line_end":321,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38053,"byte_end":38056,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ Assuming the provided `Rng` is well-behaved, these implementations","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38057,"byte_end":38127,"line_start":323,"line_end":323,"column_start":1,"column_end":71}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38128,"byte_end":38192,"line_start":324,"line_end":324,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38193,"byte_end":38196,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38197,"byte_end":38273,"line_start":326,"line_end":326,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38274,"byte_end":38308,"line_start":327,"line_end":327,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38309,"byte_end":38385,"line_start":328,"line_end":328,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38386,"byte_end":38454,"line_start":329,"line_end":329,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38455,"byte_end":38521,"line_start":330,"line_end":330,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38522,"byte_end":38560,"line_start":331,"line_end":331,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38561,"byte_end":38630,"line_start":332,"line_end":332,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38631,"byte_end":38705,"line_start":333,"line_end":333,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38706,"byte_end":38754,"line_start":334,"line_end":334,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38755,"byte_end":38831,"line_start":335,"line_end":335,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38832,"byte_end":38862,"line_start":336,"line_end":336,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38863,"byte_end":38866,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ The following aggregate types also implement the distribution `Standard` as","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38867,"byte_end":38946,"line_start":338,"line_end":338,"column_start":1,"column_end":80}},{"value":"/ long as their component types implement it:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38947,"byte_end":38994,"line_start":339,"line_end":339,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38995,"byte_end":38998,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ * Tuples and arrays: Each element of the tuple or array is generated","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":38999,"byte_end":39071,"line_start":341,"line_end":341,"column_start":1,"column_end":73}},{"value":"/   independently, using the `Standard` distribution recursively.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39072,"byte_end":39139,"line_start":342,"line_end":342,"column_start":1,"column_end":68}},{"value":"/ * `Option<T>` where `Standard` is implemented for `T`: Returns `None` with","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39140,"byte_end":39218,"line_start":343,"line_end":343,"column_start":1,"column_end":79}},{"value":"/   probability 0.5; otherwise generates a random `x: T` and returns `Some(x)`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39219,"byte_end":39300,"line_start":344,"line_end":344,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39301,"byte_end":39304,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39305,"byte_end":39318,"line_start":346,"line_end":346,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39319,"byte_end":39326,"line_start":347,"line_end":347,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39327,"byte_end":39352,"line_start":348,"line_end":348,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::Standard;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39353,"byte_end":39391,"line_start":349,"line_end":349,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39392,"byte_end":39395,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = SmallRng::from_entropy().sample(Standard);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39396,"byte_end":39457,"line_start":351,"line_end":351,"column_start":1,"column_end":62}},{"value":"/ println!(\"f32 from [0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39458,"byte_end":39499,"line_start":352,"line_end":352,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39500,"byte_end":39507,"line_start":353,"line_end":353,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39508,"byte_end":39511,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ # Floating point implementation","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39512,"byte_end":39547,"line_start":355,"line_end":355,"column_start":1,"column_end":36}},{"value":"/ The floating point implementations for `Standard` generate a random value in","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39548,"byte_end":39628,"line_start":356,"line_end":356,"column_start":1,"column_end":81}},{"value":"/ the half-open interval `[0, 1)`, i.e. including 0 but not 1.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39629,"byte_end":39693,"line_start":357,"line_end":357,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39694,"byte_end":39697,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39698,"byte_end":39772,"line_start":359,"line_end":359,"column_start":1,"column_end":74}},{"value":"/ the 23 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39773,"byte_end":39850,"line_start":360,"line_end":360,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39851,"byte_end":39924,"line_start":361,"line_end":361,"column_start":1,"column_end":74}},{"value":"/ multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39925,"byte_end":39995,"line_start":362,"line_end":362,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":39996,"byte_end":39999,"line_start":363,"line_end":363,"column_start":1,"column_end":4}},{"value":"/ See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40000,"byte_end":40076,"line_start":364,"line_end":364,"column_start":1,"column_end":77}},{"value":"/ samples from `(0, 1]` and `Rng::gen_range(0, 1)` which also samples from","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40077,"byte_end":40153,"line_start":365,"line_end":365,"column_start":1,"column_end":77}},{"value":"/ `[0, 1)`. Note that `Open01` and `gen_range` (which uses [`Uniform`]) use","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40154,"byte_end":40231,"line_start":366,"line_end":366,"column_start":1,"column_end":78}},{"value":"/ transmute-based methods which yield 1 bit less precision but may perform","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40232,"byte_end":40308,"line_start":367,"line_end":367,"column_start":1,"column_end":77}},{"value":"/ faster on some architectures (on modern Intel CPUs all methods have","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40309,"byte_end":40380,"line_start":368,"line_end":368,"column_start":1,"column_end":72}},{"value":"/ approximately equal performance).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40381,"byte_end":40418,"line_start":369,"line_end":369,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40419,"byte_end":40422,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`]: uniform::Uniform","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40423,"byte_end":40456,"line_start":371,"line_end":371,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1567},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40703,"byte_end":40711,"line_start":380,"line_end":380,"column_start":12,"column_end":20},"name":"Weighted","qualname":"::distributions::Weighted","value":"Weighted { weight, item }","parent":null,"children":[{"krate":0,"index":1569},{"krate":0,"index":1570}],"decl_id":null,"docs":" A value with a particular weight for use with `WeightedChoice`.\n","sig":null,"attributes":[{"value":"/ A value with a particular weight for use with `WeightedChoice`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40510,"byte_end":40577,"line_start":376,"line_end":376,"column_start":1,"column_end":68}},{"value":"deprecated(since = \"0.6.0\", note = \"use WeightedIndex instead\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40578,"byte_end":40640,"line_start":377,"line_end":377,"column_start":1,"column_end":63}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40641,"byte_end":40661,"line_start":378,"line_end":378,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":1569},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40767,"byte_end":40773,"line_start":382,"line_end":382,"column_start":9,"column_end":15},"name":"weight","qualname":"::distributions::Weighted::weight","value":"u32","parent":{"krate":0,"index":1567},"children":[],"decl_id":null,"docs":" The numerical weight of this item\n","sig":null,"attributes":[{"value":"/ The numerical weight of this item","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40721,"byte_end":40758,"line_start":381,"line_end":381,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1570},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40836,"byte_end":40840,"line_start":384,"line_end":384,"column_start":9,"column_end":13},"name":"item","qualname":"::distributions::Weighted::item","value":"T","parent":{"krate":0,"index":1567},"children":[],"decl_id":null,"docs":" The actual item which is being weighted\n","sig":null,"attributes":[{"value":"/ The actual item which is being weighted","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40784,"byte_end":40827,"line_start":383,"line_end":383,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1579},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41128,"byte_end":41142,"line_start":395,"line_end":395,"column_start":12,"column_end":26},"name":"WeightedChoice","qualname":"::distributions::WeightedChoice","value":"WeightedChoice {  }","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1583}],"decl_id":null,"docs":" A distribution that selects from a finite collection of weighted items.","sig":null,"attributes":[{"value":"/ A distribution that selects from a finite collection of weighted items.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40848,"byte_end":40923,"line_start":387,"line_end":387,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40924,"byte_end":40927,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ Deprecated: use [`WeightedIndex`] instead.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40928,"byte_end":40974,"line_start":389,"line_end":389,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40975,"byte_end":40978,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ [`WeightedIndex`]: WeightedIndex","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40979,"byte_end":41015,"line_start":391,"line_end":391,"column_start":1,"column_end":37}},{"value":"deprecated(since = \"0.6.0\", note = \"use WeightedIndex instead\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41016,"byte_end":41078,"line_start":392,"line_end":392,"column_start":1,"column_end":63}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41079,"byte_end":41099,"line_start":393,"line_end":393,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41558,"byte_end":41561,"line_start":410,"line_end":410,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedChoice>::new","value":"pub fn new(&'a mut [Weighted<T>]) -> WeightedChoice","parent":null,"children":[],"decl_id":null,"docs":" Create a new `WeightedChoice`.","sig":null,"attributes":[{"value":"/ Create a new `WeightedChoice`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41355,"byte_end":41389,"line_start":403,"line_end":403,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41394,"byte_end":41397,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ Panics if:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41402,"byte_end":41416,"line_start":405,"line_end":405,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41421,"byte_end":41424,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ - `items` is empty","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41429,"byte_end":41451,"line_start":407,"line_end":407,"column_start":5,"column_end":27}},{"value":"/ - the total weight is 0","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41456,"byte_end":41483,"line_start":408,"line_end":408,"column_start":5,"column_end":32}},{"value":"/ - the total weight is larger than a `u32` can contain.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41488,"byte_end":41546,"line_start":409,"line_end":409,"column_start":5,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":347},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":360}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[{"value":"/ Convenience re-export of common members","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146574,"byte_end":146617,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146618,"byte_end":146621,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Like the standard library's prelude, this module simplifies importing of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146622,"byte_end":146698,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ common items. Unlike the standard prelude, the contents of this module must","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146699,"byte_end":146778,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ be imported manually:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146779,"byte_end":146804,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146805,"byte_end":146808,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146809,"byte_end":146816,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146817,"byte_end":146842,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/ # let _ = StdRng::from_entropy();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146843,"byte_end":146880,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/ # let mut r = SmallRng::from_rng(thread_rng()).unwrap();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146881,"byte_end":146941,"line_start":18,"line_end":18,"column_start":1,"column_end":61}},{"value":"/ # let _: f32 = r.gen();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146942,"byte_end":146969,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":146970,"byte_end":146977,"line_start":20,"line_end":20,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prng","qualname":"::prng","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":371},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":386},{"krate":0,"index":389},{"krate":0,"index":393}],"decl_id":null,"docs":" Pseudo-random number generators.","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3265,"byte_end":3293,"line_start":95,"line_end":95,"column_start":1,"column_end":29}},{"value":"/ Pseudo-random number generators.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":147719,"byte_end":147755,"line_start":9,"line_end":9,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":147756,"byte_end":147759,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module is deprecated:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":147760,"byte_end":147790,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":147791,"byte_end":147795,"line_start":12,"line_end":12,"column_start":1,"column_end":5}},{"value":"/ -   documentation has moved to","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":147796,"byte_end":147830,"line_start":13,"line_end":13,"column_start":1,"column_end":35}},{"value":"/     [The Book](https://rust-random.github.io/book/guide-rngs.html),","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":147831,"byte_end":147902,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ -   PRNGs have moved to other `rand_*` crates.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":147903,"byte_end":147953,"line_start":15,"line_end":15,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148086,"byte_end":148091,"line_start":20,"line_end":20,"column_start":24,"column_end":29},"name":"isaac","qualname":"::prng::isaac","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","parent":null,"children":[{"krate":0,"index":368}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148238,"byte_end":148245,"line_start":24,"line_end":24,"column_start":24,"column_end":31},"name":"isaac64","qualname":"::prng::isaac64","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","parent":null,"children":[{"krate":0,"index":372}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148410,"byte_end":148416,"line_start":28,"line_end":28,"column_start":24,"column_end":30},"name":"chacha","qualname":"::prng::chacha","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","parent":null,"children":[{"krate":0,"index":383}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":148632,"byte_end":148637,"line_start":33,"line_end":33,"column_start":24,"column_end":29},"name":"hc128","qualname":"::prng::hc128","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","parent":null,"children":[{"krate":0,"index":390}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":474},{"krate":0,"index":492},{"krate":0,"index":514},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":552}],"decl_id":null,"docs":" Random number generators and adapters for common usage:","sig":null,"attributes":[{"value":"/ Random number generators and adapters for common usage:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149184,"byte_end":149243,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149244,"byte_end":149247,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ - [`ThreadRng`], a fast, secure, auto-seeded thread-local generator","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149248,"byte_end":149319,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ - [`StdRng`] and [`SmallRng`], algorithms to cover typical usage","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149320,"byte_end":149388,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ - [`EntropyRng`], [`OsRng`] and [`JitterRng`] as entropy sources","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149389,"byte_end":149457,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/ - [`mock::StepRng`] as a simple counter for tests","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149458,"byte_end":149511,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"/ - [`adapter::ReadRng`] to read from a file/stream","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149512,"byte_end":149565,"line_start":15,"line_end":15,"column_start":1,"column_end":54}},{"value":"/ - [`adapter::ReseedingRng`] to reseed a PRNG on clone / process fork etc.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149566,"byte_end":149643,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149644,"byte_end":149647,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Background — Random number generators (RNGs)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149648,"byte_end":149700,"line_start":18,"line_end":18,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149701,"byte_end":149704,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Computers are inherently deterministic, so to get *random* numbers one","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149705,"byte_end":149779,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ either has to use a hardware generator or collect bits of *entropy* from","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149780,"byte_end":149856,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/ various sources (e.g. event timestamps, or jitter). This is a relatively","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149857,"byte_end":149933,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ slow and complicated operation.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149934,"byte_end":149969,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149970,"byte_end":149973,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Generally the operating system will collect some entropy, remove bias, and","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":149974,"byte_end":150052,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ use that to seed its own PRNG; [`OsRng`] provides an interface to this.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150053,"byte_end":150128,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ [`JitterRng`] is an entropy collector included with Rand that measures","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150129,"byte_end":150203,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ jitter in the CPU execution time, and jitter in memory access time.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150204,"byte_end":150275,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ [`EntropyRng`] is a wrapper that uses the best entropy source that is","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150276,"byte_end":150349,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/ available.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150350,"byte_end":150364,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150365,"byte_end":150368,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ## Pseudo-random number generators","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150369,"byte_end":150407,"line_start":32,"line_end":32,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150408,"byte_end":150411,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ What is commonly used instead of \"true\" random number renerators, are","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150412,"byte_end":150485,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ *pseudo-random number generators* (PRNGs), deterministic algorithms that","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150486,"byte_end":150562,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ produce an infinite stream of pseudo-random numbers from a small random","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150563,"byte_end":150638,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ seed. PRNGs are faster, and have better provable properties. The numbers","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150639,"byte_end":150715,"line_start":37,"line_end":37,"column_start":1,"column_end":77}},{"value":"/ produced can be statistically of very high quality and can be impossible to","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150716,"byte_end":150795,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ predict. (They can also have obvious correlations and be trivial to predict;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150796,"byte_end":150876,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ quality varies.)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150877,"byte_end":150897,"line_start":40,"line_end":40,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150898,"byte_end":150901,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ There are two different types of PRNGs: those developed for simulations","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150902,"byte_end":150977,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ and statistics, and those developed for use in cryptography; the latter are","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":150978,"byte_end":151057,"line_start":43,"line_end":43,"column_start":1,"column_end":80}},{"value":"/ called Cryptographically Secure PRNGs (CSPRNG or CPRNG). Both types can","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151058,"byte_end":151133,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/ have good statistical quality but the latter also have to be impossible to","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151134,"byte_end":151212,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ predict, even after seeing many previous output values. Rand provides a good","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151213,"byte_end":151293,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/ default algorithm from each class:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151294,"byte_end":151332,"line_start":47,"line_end":47,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151333,"byte_end":151336,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ - [`SmallRng`] is a PRNG chosen for low memory usage, high performance and","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151337,"byte_end":151415,"line_start":49,"line_end":49,"column_start":1,"column_end":79}},{"value":"/   good statistical quality.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151416,"byte_end":151447,"line_start":50,"line_end":50,"column_start":1,"column_end":32}},{"value":"/ - [`StdRng`] is a CSPRNG chosen for good performance and trust of security","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151448,"byte_end":151526,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/   (based on reviews, maturity and usage). The current algorithm is HC-128,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151527,"byte_end":151605,"line_start":52,"line_end":52,"column_start":1,"column_end":79}},{"value":"/   which is one of the recommendations by ECRYPT's eSTREAM project.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151606,"byte_end":151676,"line_start":53,"line_end":53,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151677,"byte_end":151680,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The above PRNGs do not cover all use-cases; more algorithms can be found in","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151681,"byte_end":151760,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/ the [`prng`][crate::prng] module, as well as in several other crates. For example, you","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151761,"byte_end":151851,"line_start":56,"line_end":56,"column_start":1,"column_end":91}},{"value":"/ may wish a CSPRNG with significantly lower memory usage than [`StdRng`]","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151852,"byte_end":151927,"line_start":57,"line_end":57,"column_start":1,"column_end":76}},{"value":"/ while being less concerned about performance, in which case [`ChaChaRng`]","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":151928,"byte_end":152005,"line_start":58,"line_end":58,"column_start":1,"column_end":78}},{"value":"/ is a good choice.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152006,"byte_end":152027,"line_start":59,"line_end":59,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152028,"byte_end":152031,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ One complexity is that the internal state of a PRNG must change with every","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152032,"byte_end":152110,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/ generated number. For APIs this generally means a mutable reference to the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152111,"byte_end":152189,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ state of the PRNG has to be passed around.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152190,"byte_end":152236,"line_start":63,"line_end":63,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152237,"byte_end":152240,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ A solution is [`ThreadRng`]. This is a thread-local implementation of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152241,"byte_end":152314,"line_start":65,"line_end":65,"column_start":1,"column_end":74}},{"value":"/ [`StdRng`] with automatic seeding on first use. It is the best choice if you","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152315,"byte_end":152395,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/ \"just\" want a convenient, secure, fast random number source. Use via the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152396,"byte_end":152472,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/ [`thread_rng`] function, which gets a reference to the current thread's","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152473,"byte_end":152548,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/ local instance.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152549,"byte_end":152568,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152569,"byte_end":152572,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Seeding","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152573,"byte_end":152587,"line_start":71,"line_end":71,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152588,"byte_end":152591,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ As mentioned above, PRNGs require a random seed in order to produce random","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152592,"byte_end":152670,"line_start":73,"line_end":73,"column_start":1,"column_end":79}},{"value":"/ output. This is especially important for CSPRNGs, which are still","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152671,"byte_end":152740,"line_start":74,"line_end":74,"column_start":1,"column_end":70}},{"value":"/ deterministic algorithms, thus can only be secure if their seed value is","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152741,"byte_end":152817,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/ also secure. To seed a PRNG, use one of:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152818,"byte_end":152862,"line_start":76,"line_end":76,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152863,"byte_end":152866,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ - [`FromEntropy::from_entropy`]; this is the most convenient way to seed","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152867,"byte_end":152943,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/   with fresh, secure random data.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152944,"byte_end":152981,"line_start":79,"line_end":79,"column_start":1,"column_end":38}},{"value":"/ - [`SeedableRng::from_rng`]; this allows seeding from another PRNG or","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":152982,"byte_end":153055,"line_start":80,"line_end":80,"column_start":1,"column_end":74}},{"value":"/   from an entropy source such as [`EntropyRng`].","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153056,"byte_end":153108,"line_start":81,"line_end":81,"column_start":1,"column_end":53}},{"value":"/ - [`SeedableRng::from_seed`]; this is mostly useful if you wish to be able","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153109,"byte_end":153187,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/   to reproduce the output sequence by using a fixed seed. (Don't use","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153188,"byte_end":153260,"line_start":83,"line_end":83,"column_start":1,"column_end":73}},{"value":"/   [`StdRng`] or [`SmallRng`] in this case since different algorithms may be","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153261,"byte_end":153340,"line_start":84,"line_end":84,"column_start":1,"column_end":80}},{"value":"/   used by future versions of Rand; use an algorithm from the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153341,"byte_end":153405,"line_start":85,"line_end":85,"column_start":1,"column_end":65}},{"value":"/   [`prng`] module.)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153406,"byte_end":153429,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153430,"byte_end":153433,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ ## Conclusion","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153434,"byte_end":153451,"line_start":88,"line_end":88,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153452,"byte_end":153455,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ - [`thread_rng`] is what you often want to use.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153456,"byte_end":153507,"line_start":90,"line_end":90,"column_start":1,"column_end":52}},{"value":"/ - If you want more control, flexibility, or better performance, use","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153508,"byte_end":153579,"line_start":91,"line_end":91,"column_start":1,"column_end":72}},{"value":"/   [`StdRng`], [`SmallRng`] or an algorithm from the [`prng`] module.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153580,"byte_end":153652,"line_start":92,"line_end":92,"column_start":1,"column_end":73}},{"value":"/ - Use [`FromEntropy::from_entropy`] to seed new PRNGs.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153653,"byte_end":153711,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"/ - If you need reproducibility, use [`SeedableRng::from_seed`] combined with","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153712,"byte_end":153791,"line_start":94,"line_end":94,"column_start":1,"column_end":80}},{"value":"/   a named PRNG.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153792,"byte_end":153811,"line_start":95,"line_end":95,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153812,"byte_end":153815,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ More information and notes on cryptographic security can be found","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153816,"byte_end":153885,"line_start":97,"line_end":97,"column_start":1,"column_end":70}},{"value":"/ in the [`prng`] module.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153886,"byte_end":153913,"line_start":98,"line_end":98,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153914,"byte_end":153917,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153918,"byte_end":153933,"line_start":100,"line_end":100,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153934,"byte_end":153937,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ Examples of seeding PRNGs:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153938,"byte_end":153968,"line_start":102,"line_end":102,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153969,"byte_end":153972,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153973,"byte_end":153980,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":153981,"byte_end":154006,"line_start":105,"line_end":105,"column_start":1,"column_end":26}},{"value":"/ # use rand::Error;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154007,"byte_end":154029,"line_start":106,"line_end":106,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154030,"byte_end":154033,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ // StdRng seeded securely by the OS or local entropy collector:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154034,"byte_end":154101,"line_start":108,"line_end":108,"column_start":1,"column_end":68}},{"value":"/ let mut rng = StdRng::from_entropy();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154102,"byte_end":154143,"line_start":109,"line_end":109,"column_start":1,"column_end":42}},{"value":"/ # let v: u32 = rng.gen();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154144,"byte_end":154173,"line_start":110,"line_end":110,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154174,"byte_end":154177,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ // SmallRng seeded from thread_rng:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154178,"byte_end":154217,"line_start":112,"line_end":112,"column_start":1,"column_end":40}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154218,"byte_end":154261,"line_start":113,"line_end":113,"column_start":1,"column_end":44}},{"value":"/ let mut rng = SmallRng::from_rng(thread_rng())?;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154262,"byte_end":154314,"line_start":114,"line_end":114,"column_start":1,"column_end":53}},{"value":"/ # let v: u32 = rng.gen();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154315,"byte_end":154344,"line_start":115,"line_end":115,"column_start":1,"column_end":30}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154345,"byte_end":154357,"line_start":116,"line_end":116,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154358,"byte_end":154365,"line_start":117,"line_end":117,"column_start":1,"column_end":8}},{"value":"/ # try_inner().unwrap();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154366,"byte_end":154393,"line_start":118,"line_end":118,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154394,"byte_end":154397,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ // SmallRng seeded by a constant, for deterministic results:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154398,"byte_end":154462,"line_start":120,"line_end":120,"column_start":1,"column_end":65}},{"value":"/ let seed = [1,2,3,4, 5,6,7,8, 9,10,11,12, 13,14,15,16]; // byte array","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154463,"byte_end":154536,"line_start":121,"line_end":121,"column_start":1,"column_end":74}},{"value":"/ let mut rng = SmallRng::from_seed(seed);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154537,"byte_end":154581,"line_start":122,"line_end":122,"column_start":1,"column_end":45}},{"value":"/ # let v: u32 = rng.gen();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154582,"byte_end":154611,"line_start":123,"line_end":123,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154612,"byte_end":154619,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154620,"byte_end":154623,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154624,"byte_end":154627,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ # Implementing custom RNGs","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154628,"byte_end":154658,"line_start":127,"line_end":127,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154659,"byte_end":154662,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ If you want to implement custom RNG, see the [`rand_core`] crate. The RNG","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154663,"byte_end":154740,"line_start":129,"line_end":129,"column_start":1,"column_end":78}},{"value":"/ will have to implement the [`RngCore`] trait, where the [`Rng`] trait is","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154741,"byte_end":154817,"line_start":130,"line_end":130,"column_start":1,"column_end":77}},{"value":"/ build on top of.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154818,"byte_end":154838,"line_start":131,"line_end":131,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154839,"byte_end":154842,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ If the RNG needs seeding, also implement the [`SeedableRng`] trait.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154843,"byte_end":154914,"line_start":133,"line_end":133,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154915,"byte_end":154918,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ [`CryptoRng`] is a marker trait cryptographically secure PRNGs can","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154919,"byte_end":154989,"line_start":135,"line_end":135,"column_start":1,"column_end":71}},{"value":"/ implement.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":154990,"byte_end":155004,"line_start":136,"line_end":136,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155005,"byte_end":155008,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ [`OsRng`]: rand_os::OsRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155009,"byte_end":155038,"line_start":138,"line_end":138,"column_start":1,"column_end":30}},{"value":"/ [`SmallRng`]: rngs::SmallRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155039,"byte_end":155071,"line_start":139,"line_end":139,"column_start":1,"column_end":33}},{"value":"/ [`StdRng`]: rngs::StdRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155072,"byte_end":155100,"line_start":140,"line_end":140,"column_start":1,"column_end":29}},{"value":"/ [`ThreadRng`]: rngs::ThreadRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155101,"byte_end":155135,"line_start":141,"line_end":141,"column_start":1,"column_end":35}},{"value":"/ [`EntropyRng`]: rngs::EntropyRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155136,"byte_end":155172,"line_start":142,"line_end":142,"column_start":1,"column_end":37}},{"value":"/ [`JitterRng`]: rngs::JitterRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155173,"byte_end":155207,"line_start":143,"line_end":143,"column_start":1,"column_end":35}},{"value":"/ [`mock::StepRng`]: rngs::mock::StepRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155208,"byte_end":155250,"line_start":144,"line_end":144,"column_start":1,"column_end":43}},{"value":"/ [`adapter::ReadRng`]: rngs::adapter::ReadRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155251,"byte_end":155299,"line_start":145,"line_end":145,"column_start":1,"column_end":49}},{"value":"/ [`adapter::ReseedingRng`]: rngs::adapter::ReseedingRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155300,"byte_end":155358,"line_start":146,"line_end":146,"column_start":1,"column_end":59}},{"value":"/ [`ChaChaRng`]: rand_chacha::ChaChaRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155359,"byte_end":155400,"line_start":147,"line_end":147,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\mod.rs","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":471}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[{"value":"/ Wrappers / adapters forming RNGs","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\mod.rs","byte_start":156286,"byte_end":156322,"line_start":9,"line_end":9,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1588},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160053,"byte_end":160065,"line_start":88,"line_end":88,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.","sig":null,"attributes":[{"value":"/ A wrapper around any PRNG that implements [`BlockRngCore`], that adds the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157135,"byte_end":157212,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ ability to reseed it.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157213,"byte_end":157238,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157239,"byte_end":157242,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `ReseedingRng` reseeds the underlying PRNG in the following cases:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157243,"byte_end":157313,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157314,"byte_end":157317,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - On a manual call to [`reseed()`].","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157318,"byte_end":157357,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - After `clone()`, the clone will be reseeded on first use.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157358,"byte_end":157421,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ - After a process is forked, the RNG in the child process is reseeded within","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157422,"byte_end":157502,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   the next few generated values, depending on the block size of the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157503,"byte_end":157574,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/   underlying PRNG. For [`ChaChaCore`] and [`Hc128Core`] this is a maximum of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157575,"byte_end":157655,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/   15 `u32` values before reseeding.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157656,"byte_end":157695,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ - After the PRNG has generated a configurable number of random bytes.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157696,"byte_end":157769,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157770,"byte_end":157773,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # When should reseeding after a fixed number of generated bytes be used?","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157774,"byte_end":157850,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157851,"byte_end":157854,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Reseeding after a fixed number of generated bytes is never strictly","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157855,"byte_end":157926,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ *necessary*. Cryptographic PRNGs don't have a limited number of bytes they","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":157927,"byte_end":158005,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ can output, or at least not a limit reachable in any practical way. There is","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158006,"byte_end":158086,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ no such thing as 'running out of entropy'.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158087,"byte_end":158133,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158134,"byte_end":158137,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Occasionally reseeding can be seen as some form of 'security in depth'. Even","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158138,"byte_end":158218,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ if in the future a cryptographic weakness is found in the CSPRNG being used,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158219,"byte_end":158299,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ or a flaw in the implementation, occasionally reseeding should make","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158300,"byte_end":158371,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ exploiting it much more difficult or even impossible.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158372,"byte_end":158429,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158430,"byte_end":158433,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Use [`ReseedingRng::new`] with a `threshold` of `0` to disable reseeding","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158434,"byte_end":158510,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ after a fixed number of generated bytes.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158511,"byte_end":158555,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158556,"byte_end":158559,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Error handling","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158560,"byte_end":158580,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158581,"byte_end":158584,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Although unlikely, reseeding the wrapped PRNG can fail. `ReseedingRng` will","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158585,"byte_end":158664,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ never panic but try to handle the error intelligently through some","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158665,"byte_end":158735,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/ combination of retrying and delaying reseeding until later.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158736,"byte_end":158799,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ If handling the source error fails `ReseedingRng` will continue generating","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158800,"byte_end":158878,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ data from the wrapped PRNG without reseeding.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158879,"byte_end":158928,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158929,"byte_end":158932,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Manually calling [`reseed()`] will not have this retry or delay logic, but","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":158933,"byte_end":159011,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ reports the error.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159012,"byte_end":159034,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159035,"byte_end":159038,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159039,"byte_end":159052,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159053,"byte_end":159056,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159057,"byte_end":159064,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ # extern crate rand;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159065,"byte_end":159089,"line_start":60,"line_end":60,"column_start":1,"column_end":25}},{"value":"/ # extern crate rand_chacha;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159090,"byte_end":159121,"line_start":61,"line_end":61,"column_start":1,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159122,"byte_end":159139,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159140,"byte_end":159165,"line_start":63,"line_end":63,"column_start":1,"column_end":26}},{"value":"/ use rand_chacha::ChaChaCore; // Internal part of ChaChaRng that","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159166,"byte_end":159233,"line_start":64,"line_end":64,"column_start":1,"column_end":68}},{"value":"/                              // implements BlockRngCore","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159234,"byte_end":159293,"line_start":65,"line_end":65,"column_start":1,"column_end":60}},{"value":"/ use rand::rngs::OsRng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159294,"byte_end":159320,"line_start":66,"line_end":66,"column_start":1,"column_end":27}},{"value":"/ use rand::rngs::adapter::ReseedingRng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159321,"byte_end":159363,"line_start":67,"line_end":67,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159364,"byte_end":159367,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let prng = ChaChaCore::from_entropy();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159368,"byte_end":159410,"line_start":69,"line_end":69,"column_start":1,"column_end":43}},{"value":"/ let reseeder = OsRng::new().unwrap();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159506,"byte_end":159547,"line_start":72,"line_end":72,"column_start":1,"column_end":42}},{"value":"/ let mut reseeding_rng = ReseedingRng::new(prng, 0, reseeder);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159548,"byte_end":159613,"line_start":73,"line_end":73,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159614,"byte_end":159617,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", reseeding_rng.gen::<u64>());","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159618,"byte_end":159665,"line_start":75,"line_end":75,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159666,"byte_end":159669,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ let mut cloned_rng = reseeding_rng.clone();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159670,"byte_end":159717,"line_start":77,"line_end":77,"column_start":1,"column_end":48}},{"value":"/ assert!(reseeding_rng.gen::<u64>() != cloned_rng.gen::<u64>());","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159718,"byte_end":159785,"line_start":78,"line_end":78,"column_start":1,"column_end":68}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159786,"byte_end":159793,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159794,"byte_end":159801,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159802,"byte_end":159805,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`ChaChaCore`]: rand_chacha::ChaChaCore","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159806,"byte_end":159849,"line_start":82,"line_end":82,"column_start":1,"column_end":44}},{"value":"/ [`Hc128Core`]: rand_hc::Hc128Core","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159850,"byte_end":159887,"line_start":83,"line_end":83,"column_start":1,"column_end":38}},{"value":"/ [`BlockRngCore`]: rand_core::block::BlockRngCore","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159888,"byte_end":159940,"line_start":84,"line_end":84,"column_start":1,"column_end":53}},{"value":"/ [`ReseedingRng::new`]: ReseedingRng::new","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159941,"byte_end":159985,"line_start":85,"line_end":85,"column_start":1,"column_end":45}},{"value":"/ [`reseed()`]: ReseedingRng::reseed","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":159986,"byte_end":160024,"line_start":86,"line_end":86,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160564,"byte_end":160567,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"pub fn new(R, u64, Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.","sig":null,"attributes":[{"value":"/ Create a new `ReseedingRng` from an existing PRNG, combined with a RNG","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160267,"byte_end":160341,"line_start":96,"line_end":96,"column_start":5,"column_end":79}},{"value":"/ to use as reseeder.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160346,"byte_end":160369,"line_start":97,"line_end":97,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160374,"byte_end":160377,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ `threshold` sets the number of generated bytes after which to reseed the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160382,"byte_end":160458,"line_start":99,"line_end":99,"column_start":5,"column_end":81}},{"value":"/ PRNG. Set it to zero to never reseed based on the number of generated","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160463,"byte_end":160536,"line_start":100,"line_end":100,"column_start":5,"column_end":78}},{"value":"/ values.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160541,"byte_end":160552,"line_start":101,"line_end":101,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160752,"byte_end":160758,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"pub fn reseed(&mut Self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[{"value":"/ Reseed the internal PRNG.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160711,"byte_end":160740,"line_start":106,"line_end":106,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":479},{"krate":0,"index":482},{"krate":0,"index":1609},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":485},{"krate":0,"index":487}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[{"value":"/ Mock random number generator","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":169748,"byte_end":169780,"line_start":9,"line_end":9,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1609},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170309,"byte_end":170316,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":1610},{"krate":0,"index":1611}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.\n \n This generates an arithmetic sequence (i.e. adds a constant each step)\n over a `u64` number, using wrapping arithmetic. If the increment is 0\n the generator yields a constant.\n \n ```\n use rand::Rng;\n use rand::rngs::mock::StepRng;\n \n let mut my_rng = StepRng::new(2, 1);\n let sample: [u64; 3] = my_rng.gen();\n assert_eq!(sample, [2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ A simple implementation of `RngCore` for testing purposes.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":169823,"byte_end":169885,"line_start":13,"line_end":13,"column_start":1,"column_end":63}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":169886,"byte_end":169890,"line_start":14,"line_end":14,"column_start":1,"column_end":5}},{"value":"/ This generates an arithmetic sequence (i.e. adds a constant each step)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":169891,"byte_end":169965,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ over a `u64` number, using wrapping arithmetic. If the increment is 0","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":169966,"byte_end":170039,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/ the generator yields a constant.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170040,"byte_end":170076,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170077,"byte_end":170081,"line_start":18,"line_end":18,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170082,"byte_end":170089,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170090,"byte_end":170108,"line_start":20,"line_end":20,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::mock::StepRng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170109,"byte_end":170143,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170144,"byte_end":170148,"line_start":22,"line_end":22,"column_start":1,"column_end":5}},{"value":"/ let mut my_rng = StepRng::new(2, 1);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170149,"byte_end":170189,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"/ let sample: [u64; 3] = my_rng.gen();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170190,"byte_end":170230,"line_start":24,"line_end":24,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(sample, [2, 3, 4]);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170231,"byte_end":170265,"line_start":25,"line_end":25,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170266,"byte_end":170273,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170506,"byte_end":170509,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"pub fn new(u64, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[{"value":"/ Create a `StepRng`, yielding an arithmetic sequence starting with","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170365,"byte_end":170434,"line_start":34,"line_end":34,"column_start":5,"column_end":74}},{"value":"/ `initial` and incremented by `increment` each time.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170439,"byte_end":170494,"line_start":35,"line_end":35,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1616},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173948,"byte_end":173956,"line_start":74,"line_end":74,"column_start":12,"column_end":20},"name":"SmallRng","qualname":"::rngs::small::SmallRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" An RNG recommended when small state, cheap initialization and good\n performance are required. The PRNG algorithm in `SmallRng` is chosen to be\n efficient on the current platform, **without consideration for cryptography\n or security**. The size of its state is much smaller than for [`StdRng`].","sig":null,"attributes":[{"value":"/ An RNG recommended when small state, cheap initialization and good","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":171718,"byte_end":171788,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/ performance are required. The PRNG algorithm in `SmallRng` is chosen to be","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":171789,"byte_end":171867,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ efficient on the current platform, **without consideration for cryptography","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":171868,"byte_end":171947,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ or security**. The size of its state is much smaller than for [`StdRng`].","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":171948,"byte_end":172025,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172026,"byte_end":172029,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Reproducibility of output from this generator is however not required, thus","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172030,"byte_end":172109,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ future library versions may use a different internal generator with","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172110,"byte_end":172181,"line_start":24,"line_end":24,"column_start":1,"column_end":72}},{"value":"/ different output. Further, this generator may not be portable and can","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172182,"byte_end":172255,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ produce different output depending on the architecture. If you require","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172256,"byte_end":172330,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ reproducible output, use a named RNG.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172331,"byte_end":172372,"line_start":27,"line_end":27,"column_start":1,"column_end":42}},{"value":"/ Refer to [The Book](https://rust-random.github.io/book/guide-rngs.html).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172373,"byte_end":172449,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172450,"byte_end":172454,"line_start":29,"line_end":29,"column_start":1,"column_end":5}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172455,"byte_end":172458,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ The current algorithm is [`Pcg64Mcg`][rand_pcg::Pcg64Mcg] on 64-bit platforms with Rust version","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172459,"byte_end":172558,"line_start":31,"line_end":31,"column_start":1,"column_end":100}},{"value":"/ 1.26 and later, or [`Pcg32`][rand_pcg::Pcg32] otherwise. Both are found in","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172559,"byte_end":172637,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ the [rand_pcg] crate.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172638,"byte_end":172663,"line_start":33,"line_end":33,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172664,"byte_end":172667,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172668,"byte_end":172682,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172683,"byte_end":172686,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Initializing `SmallRng` with a random seed can be done using [`FromEntropy`]:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172687,"byte_end":172768,"line_start":37,"line_end":37,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172769,"byte_end":172772,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172773,"byte_end":172780,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ # use rand::Rng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172781,"byte_end":172801,"line_start":40,"line_end":40,"column_start":1,"column_end":21}},{"value":"/ use rand::FromEntropy;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172802,"byte_end":172828,"line_start":41,"line_end":41,"column_start":1,"column_end":27}},{"value":"/ use rand::rngs::SmallRng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172829,"byte_end":172858,"line_start":42,"line_end":42,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172859,"byte_end":172862,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // Create small, cheap to initialize and fast RNG with a random seed.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172863,"byte_end":172936,"line_start":44,"line_end":44,"column_start":1,"column_end":74}},{"value":"/ // The randomness is supplied by the operating system.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172937,"byte_end":172995,"line_start":45,"line_end":45,"column_start":1,"column_end":59}},{"value":"/ let mut small_rng = SmallRng::from_entropy();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":172996,"byte_end":173045,"line_start":46,"line_end":46,"column_start":1,"column_end":50}},{"value":"/ # let v: u32 = small_rng.gen();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173046,"byte_end":173081,"line_start":47,"line_end":47,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173082,"byte_end":173089,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173090,"byte_end":173093,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ When initializing a lot of `SmallRng`'s, using [`thread_rng`] can be more","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173094,"byte_end":173171,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/ efficient:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173172,"byte_end":173186,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173187,"byte_end":173190,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173191,"byte_end":173198,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173199,"byte_end":173217,"line_start":54,"line_end":54,"column_start":1,"column_end":19}},{"value":"/ use rand::{SeedableRng, thread_rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173218,"byte_end":173258,"line_start":55,"line_end":55,"column_start":1,"column_end":41}},{"value":"/ use rand::rngs::SmallRng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173259,"byte_end":173288,"line_start":56,"line_end":56,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173289,"byte_end":173292,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // Create a big, expensive to initialize and slower, but unpredictable RNG.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173293,"byte_end":173372,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/ // This is cached and done only once per thread.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173373,"byte_end":173425,"line_start":59,"line_end":59,"column_start":1,"column_end":53}},{"value":"/ let mut thread_rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173426,"byte_end":173464,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ // Create small, cheap to initialize and fast RNGs with random seeds.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173465,"byte_end":173538,"line_start":61,"line_end":61,"column_start":1,"column_end":74}},{"value":"/ // One can generally assume this won't fail.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173539,"byte_end":173587,"line_start":62,"line_end":62,"column_start":1,"column_end":49}},{"value":"/ let rngs: Vec<SmallRng> = iter::repeat(())","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173588,"byte_end":173634,"line_start":63,"line_end":63,"column_start":1,"column_end":47}},{"value":"/     .map(|()| SmallRng::from_rng(&mut thread_rng).unwrap())","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173635,"byte_end":173698,"line_start":64,"line_end":64,"column_start":1,"column_end":64}},{"value":"/     .take(10)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173699,"byte_end":173716,"line_start":65,"line_end":65,"column_start":1,"column_end":18}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173717,"byte_end":173736,"line_start":66,"line_end":66,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173737,"byte_end":173744,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173745,"byte_end":173748,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ [`FromEntropy`]: crate::FromEntropy","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173749,"byte_end":173788,"line_start":69,"line_end":69,"column_start":1,"column_end":40}},{"value":"/ [`StdRng`]: crate::rngs::StdRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173789,"byte_end":173824,"line_start":70,"line_end":70,"column_start":1,"column_end":36}},{"value":"/ [`thread_rng`]: crate::thread_rng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173825,"byte_end":173862,"line_start":71,"line_end":71,"column_start":1,"column_end":38}},{"value":"/ [rand_pcg]: https://crates.io/crates/rand_pcg","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173863,"byte_end":173912,"line_start":72,"line_end":72,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1623},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":176030,"byte_end":176036,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[{"value":"/ The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175107,"byte_end":175185,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ on the current platform, to be statistically strong and unpredictable","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175186,"byte_end":175259,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/ (meaning a cryptographically secure PRNG).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175260,"byte_end":175306,"line_start":16,"line_end":16,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175307,"byte_end":175310,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The current algorithm used on all platforms is [HC-128], found in the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175311,"byte_end":175384,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ [rand_hc] crate.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175385,"byte_end":175405,"line_start":19,"line_end":19,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175406,"byte_end":175409,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Reproducibility of output from this generator is however not required, thus","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175410,"byte_end":175489,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ future library versions may use a different internal generator with","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175490,"byte_end":175561,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ different output. Further, this generator may not be portable and can","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175562,"byte_end":175635,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ produce different output depending on the architecture. If you require","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175636,"byte_end":175710,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ reproducible output, use a named RNG, for example [`ChaChaRng`] from the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175711,"byte_end":175787,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/ [rand_chacha] crate.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175788,"byte_end":175812,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175813,"byte_end":175816,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [HC-128]: rand_hc::Hc128Rng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175817,"byte_end":175848,"line_start":28,"line_end":28,"column_start":1,"column_end":32}},{"value":"/ [`ChaChaRng`]: rand_chacha::ChaChaRng","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175849,"byte_end":175890,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/ [rand_hc]: https://crates.io/crates/rand_hc","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175891,"byte_end":175938,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ [rand_chacha]: https://crates.io/crates/rand_chacha","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":175939,"byte_end":175994,"line_start":31,"line_end":31,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":559},{"krate":0,"index":569},{"krate":0,"index":574},{"krate":0,"index":585}],"decl_id":null,"docs":" Functions for randomly accessing and sampling sequences.\n \n TODO: module doc\n","sig":null,"attributes":[{"value":"/ Functions for randomly accessing and sampling sequences.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":177615,"byte_end":177675,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":177676,"byte_end":177680,"line_start":10,"line_end":10,"column_start":1,"column_end":5}},{"value":"/ TODO: module doc","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":177681,"byte_end":177701,"line_start":11,"line_end":11,"column_start":1,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178205,"byte_end":178216,"line_start":28,"line_end":28,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":567}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.\n \n An implementation is provided for slices. This may also be implementable for\n other types.\n","sig":null,"attributes":[{"value":"/ Extension trait on slices, providing random mutation and sampling methods.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178013,"byte_end":178091,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178092,"byte_end":178096,"line_start":25,"line_end":25,"column_start":1,"column_end":5}},{"value":"/ An implementation is provided for slices. This may also be implementable for","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178097,"byte_end":178177,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ other types.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178178,"byte_end":178194,"line_start":27,"line_end":27,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178254,"byte_end":178258,"line_start":30,"line_end":30,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":559},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[{"value":"/ The element type.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178223,"byte_end":178244,"line_start":29,"line_end":29,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178781,"byte_end":178787,"line_start":48,"line_end":48,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"pub fn choose<R>(&Self, &mut R) -> Option<&Self::Item> where R: Rng + ?Sized","parent":{"krate":0,"index":559},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.\n \n Depending on the implementation, complexity is expected to be `O(1)`.","sig":null,"attributes":[{"value":"/ Returns a reference to one random element of the slice, or `None` if the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178265,"byte_end":178341,"line_start":32,"line_end":32,"column_start":5,"column_end":81}},{"value":"/ slice is empty.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178346,"byte_end":178365,"line_start":33,"line_end":33,"column_start":5,"column_end":24}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178370,"byte_end":178374,"line_start":34,"line_end":34,"column_start":5,"column_end":9}},{"value":"/ Depending on the implementation, complexity is expected to be `O(1)`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178379,"byte_end":178452,"line_start":35,"line_end":35,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178457,"byte_end":178460,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178465,"byte_end":178478,"line_start":37,"line_end":37,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178483,"byte_end":178486,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178491,"byte_end":178498,"line_start":39,"line_end":39,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178503,"byte_end":178528,"line_start":40,"line_end":40,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178533,"byte_end":178564,"line_start":41,"line_end":41,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178569,"byte_end":178572,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178577,"byte_end":178616,"line_start":43,"line_end":43,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178621,"byte_end":178652,"line_start":44,"line_end":44,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", choices.choose(&mut rng));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178657,"byte_end":178704,"line_start":45,"line_end":45,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(choices[..0].choose(&mut rng), None);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178709,"byte_end":178761,"line_start":46,"line_end":46,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178766,"byte_end":178773,"line_start":47,"line_end":47,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":179073,"byte_end":179083,"line_start":55,"line_end":55,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"pub fn choose_mut<R>(&mut Self, &mut R) -> Option<&mut Self::Item> where\nR: Rng + ?Sized","parent":{"krate":0,"index":559},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.\n \n Depending on the implementation, complexity is expected to be `O(1)`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to one random element of the slice, or","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178870,"byte_end":178940,"line_start":51,"line_end":51,"column_start":5,"column_end":75}},{"value":"/ `None` if the slice is empty.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178945,"byte_end":178978,"line_start":52,"line_end":52,"column_start":5,"column_end":38}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178983,"byte_end":178987,"line_start":53,"line_end":53,"column_start":5,"column_end":9}},{"value":"/ Depending on the implementation, complexity is expected to be `O(1)`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":178992,"byte_end":179065,"line_start":54,"line_end":54,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182709,"byte_end":182716,"line_start":149,"line_end":149,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"pub fn shuffle<R>(&mut Self, &mut R) where R: Rng + ?Sized","parent":{"krate":0,"index":559},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.\n \n Depending on the implementation, complexity is expected to be `O(1)`.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182261,"byte_end":182298,"line_start":133,"line_end":133,"column_start":5,"column_end":42}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182303,"byte_end":182307,"line_start":134,"line_end":134,"column_start":5,"column_end":9}},{"value":"/ Depending on the implementation, complexity is expected to be `O(1)`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182312,"byte_end":182385,"line_start":135,"line_end":135,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182390,"byte_end":182393,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182398,"byte_end":182411,"line_start":137,"line_end":137,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182416,"byte_end":182419,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182424,"byte_end":182431,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182436,"byte_end":182461,"line_start":140,"line_end":140,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182466,"byte_end":182497,"line_start":141,"line_end":141,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182502,"byte_end":182505,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182510,"byte_end":182541,"line_start":143,"line_end":143,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182546,"byte_end":182578,"line_start":144,"line_end":144,"column_start":5,"column_end":37}},{"value":"/ println!(\"Unshuffled: {:?}\", y);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182583,"byte_end":182619,"line_start":145,"line_end":145,"column_start":5,"column_end":41}},{"value":"/ y.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182624,"byte_end":182648,"line_start":146,"line_end":146,"column_start":5,"column_end":29}},{"value":"/ println!(\"Shuffled:   {:?}\", y);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182653,"byte_end":182689,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182694,"byte_end":182701,"line_start":148,"line_end":148,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183580,"byte_end":183595,"line_start":168,"line_end":168,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"pub fn partial_shuffle<R>(&mut Self, &mut R, usize)\n-> (&mut [Self::Item], &mut [Self::Item]) where R: Rng + ?Sized","parent":{"krate":0,"index":559},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[{"value":"/ Shuffle a slice in place, but exit early.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182772,"byte_end":182817,"line_start":151,"line_end":151,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182822,"byte_end":182825,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Returns two mutable slices from the source slice. The first contains","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182830,"byte_end":182902,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ `amount` elements randomly permuted. The second has the remaining","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182907,"byte_end":182976,"line_start":154,"line_end":154,"column_start":5,"column_end":74}},{"value":"/ elements that are not fully shuffled.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":182981,"byte_end":183022,"line_start":155,"line_end":155,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183027,"byte_end":183030,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ This is an efficient method to select `amount` elements at random from","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183035,"byte_end":183109,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/ the slice, provided the slice may be mutated.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183114,"byte_end":183163,"line_start":158,"line_end":158,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183168,"byte_end":183171,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ If you only need to choose elements randomly and `amount > self.len()/2`","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183176,"byte_end":183252,"line_start":160,"line_end":160,"column_start":5,"column_end":81}},{"value":"/ then you may improve performance by taking","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183257,"byte_end":183303,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/ `amount = values.len() - amount` and using only the second slice.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183308,"byte_end":183377,"line_start":162,"line_end":162,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183382,"byte_end":183385,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ If `amount` is greater than the number of elements in the slice, this","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183390,"byte_end":183463,"line_start":164,"line_end":164,"column_start":5,"column_end":78}},{"value":"/ will perform a full shuffle.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183468,"byte_end":183500,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183505,"byte_end":183508,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Complexity is expected to be `O(m)` where `m = amount`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183513,"byte_end":183572,"line_start":167,"line_end":167,"column_start":5,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183793,"byte_end":183807,"line_start":173,"line_end":173,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":572}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.\n","sig":null,"attributes":[{"value":"/ Extension trait on iterators, providing random sampling methods.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183714,"byte_end":183782,"line_start":172,"line_end":172,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":184381,"byte_end":184387,"line_start":186,"line_end":186,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"pub fn choose<R>(Self, &mut R) -> Option<Self::Item> where R: Rng + ?Sized","parent":{"krate":0,"index":569},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator. If you have a slice,\n it's significantly faster to call the [`choose`] or [`choose_mut`]\n functions using the slice instead.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator. If you have a slice,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183832,"byte_end":183904,"line_start":174,"line_end":174,"column_start":5,"column_end":77}},{"value":"/ it's significantly faster to call the [`choose`] or [`choose_mut`]","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183909,"byte_end":183979,"line_start":175,"line_end":175,"column_start":5,"column_end":75}},{"value":"/ functions using the slice instead.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183984,"byte_end":184022,"line_start":176,"line_end":176,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":184027,"byte_end":184030,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":184035,"byte_end":184091,"line_start":178,"line_end":178,"column_start":5,"column_end":61}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":184096,"byte_end":184100,"line_start":179,"line_end":179,"column_start":5,"column_end":9}},{"value":"/ Complexity is `O(n)`, where `n` is the length of the iterator.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":184105,"byte_end":184171,"line_start":180,"line_end":180,"column_start":5,"column_end":71}},{"value":"/ This likely consumes multiple random numbers, but the exact number","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":184176,"byte_end":184246,"line_start":181,"line_end":181,"column_start":5,"column_end":75}},{"value":"/ is unspecified.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":184251,"byte_end":184270,"line_start":182,"line_end":182,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":184275,"byte_end":184278,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ [`choose`]: SliceRandom::method.choose","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":184283,"byte_end":184325,"line_start":184,"line_end":184,"column_start":5,"column_end":47}},{"value":"/ [`choose_mut`]: SliceRandom::choose_mut","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":184330,"byte_end":184373,"line_start":185,"line_end":185,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":186398,"byte_end":186418,"line_start":245,"line_end":245,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"pub fn choose_multiple_fill<R>(Self, &mut R, &mut [Self::Item]) -> usize where\nR: Rng + ?Sized","parent":{"krate":0,"index":569},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a supplied\n buffer.\n \n Although the elements are selected randomly, the order of elements in\n the buffer is neither stable nor fully random. If random ordering is\n desired, shuffle the result.\n \n Returns the number of elements added to the buffer. This equals `amount`\n unless the iterator contains insufficient elements, in which case this\n equals the number of elements available.\n \n Complexity is `O(n)` where `n` is the length of the iterator.\n","sig":null,"attributes":[{"value":"/ Collects `amount` values at random from the iterator into a supplied","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":185804,"byte_end":185876,"line_start":233,"line_end":233,"column_start":5,"column_end":77}},{"value":"/ buffer.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":185881,"byte_end":185892,"line_start":234,"line_end":234,"column_start":5,"column_end":16}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":185897,"byte_end":185901,"line_start":235,"line_end":235,"column_start":5,"column_end":9}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":185906,"byte_end":185979,"line_start":236,"line_end":236,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":185984,"byte_end":186056,"line_start":237,"line_end":237,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":186061,"byte_end":186093,"line_start":238,"line_end":238,"column_start":5,"column_end":37}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":186098,"byte_end":186102,"line_start":239,"line_end":239,"column_start":5,"column_end":9}},{"value":"/ Returns the number of elements added to the buffer. This equals `amount`","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":186107,"byte_end":186183,"line_start":240,"line_end":240,"column_start":5,"column_end":81}},{"value":"/ unless the iterator contains insufficient elements, in which case this","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":186188,"byte_end":186262,"line_start":241,"line_end":241,"column_start":5,"column_end":79}},{"value":"/ equals the number of elements available.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":186267,"byte_end":186311,"line_start":242,"line_end":242,"column_start":5,"column_end":49}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":186316,"byte_end":186320,"line_start":243,"line_end":243,"column_start":5,"column_end":9}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":186325,"byte_end":186390,"line_start":244,"line_end":244,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1630},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":207374,"byte_end":207382,"line_start":26,"line_end":26,"column_start":12,"column_end":20},"name":"IsaacRng","qualname":"::deprecated::IsaacRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note =\n             \"import from rand_isaac crate instead, or use the newer Hc128Rng\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":207258,"byte_end":207362,"line_start":24,"line_end":25,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":208224,"byte_end":208236,"line_start":63,"line_end":63,"column_start":12,"column_end":24},"name":"new_from_u64","qualname":"<IsaacRng>::new_from_u64","value":"pub fn new_from_u64(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1637},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":208463,"byte_end":208473,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"Isaac64Rng","qualname":"::deprecated::Isaac64Rng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note =\n             \"import from rand_isaac crate instead, or use newer Hc128Rng\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":208351,"byte_end":208451,"line_start":70,"line_end":71,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":209333,"byte_end":209345,"line_start":109,"line_end":109,"column_start":12,"column_end":24},"name":"new_from_u64","qualname":"<Isaac64Rng>::new_from_u64","value":"pub fn new_from_u64(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1644},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":209550,"byte_end":209559,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"ChaChaRng","qualname":"::deprecated::ChaChaRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note = \"import from rand_chacha crate instead\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":209464,"byte_end":209538,"line_start":116,"line_end":116,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210473,"byte_end":210485,"line_start":155,"line_end":155,"column_start":12,"column_end":24},"name":"get_word_pos","qualname":"<ChaChaRng>::get_word_pos","value":"pub fn get_word_pos(&Self) -> u128","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(all(rustc_1_26, not(target_os = \"emscripten\")))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210407,"byte_end":210461,"line_start":154,"line_end":154,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210610,"byte_end":210622,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"set_word_pos","qualname":"<ChaChaRng>::set_word_pos","value":"pub fn set_word_pos(&mut Self, u128)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(all(rustc_1_26, not(target_os = \"emscripten\")))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210544,"byte_end":210598,"line_start":159,"line_end":159,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210714,"byte_end":210724,"line_start":164,"line_end":164,"column_start":12,"column_end":22},"name":"set_stream","qualname":"<ChaChaRng>::set_stream","value":"pub fn set_stream(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1651},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210934,"byte_end":210942,"line_start":174,"line_end":174,"column_start":12,"column_end":20},"name":"Hc128Rng","qualname":"::deprecated::Hc128Rng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note = \"import from rand_hc crate instead\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210852,"byte_end":210922,"line_start":173,"line_end":173,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":1658},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":211890,"byte_end":211901,"line_start":215,"line_end":215,"column_start":12,"column_end":23},"name":"XorShiftRng","qualname":"::deprecated::XorShiftRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note =\n             \"import from rand_xorshift crate instead\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":211802,"byte_end":211878,"line_start":214,"line_end":214,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1665},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":212896,"byte_end":212902,"line_start":255,"line_end":255,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::deprecated::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note =\n             \"import with rand::prelude::* or rand::rngs::StdRng instead\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":212785,"byte_end":212884,"line_start":253,"line_end":254,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1672},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":215582,"byte_end":215591,"line_start":381,"line_end":381,"column_start":12,"column_end":21},"name":"JitterRng","qualname":"::deprecated::JitterRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note =\n             \"import with rand::rngs::JitterRng instead\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":215492,"byte_end":215570,"line_start":380,"line_end":380,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":216271,"byte_end":216285,"line_start":411,"line_end":411,"column_start":12,"column_end":26},"name":"new_with_timer","qualname":"<JitterRng>::new_with_timer","value":"pub fn new_with_timer(fn() -> u64) -> JitterRng","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":216397,"byte_end":216407,"line_start":415,"line_end":415,"column_start":12,"column_end":22},"name":"set_rounds","qualname":"<JitterRng>::set_rounds","value":"pub fn set_rounds(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":216485,"byte_end":216495,"line_start":419,"line_end":419,"column_start":12,"column_end":22},"name":"test_timer","qualname":"<JitterRng>::test_timer","value":"pub fn test_timer(&mut Self) -> Result<u8, rngs::TimerError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1679},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":218321,"byte_end":218333,"line_start":502,"line_end":502,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::deprecated::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":219103,"byte_end":219106,"line_start":533,"line_end":533,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"pub fn new(R, u64, Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":219256,"byte_end":219262,"line_start":537,"line_end":537,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"pub fn reseed(&mut Self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3998,"byte_end":4004,"line_start":124,"line_end":124,"column_start":9,"column_end":15},"name":"jitter","qualname":"::jitter","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":735}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3954,"byte_end":3974,"line_start":122,"line_end":122,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4226,"byte_end":4232,"line_start":136,"line_end":136,"column_start":9,"column_end":15},"name":"chacha","qualname":"::chacha","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":739}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4182,"byte_end":4202,"line_start":134,"line_end":134,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4316,"byte_end":4321,"line_start":141,"line_end":141,"column_start":9,"column_end":14},"name":"isaac","qualname":"::isaac","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":747}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4272,"byte_end":4292,"line_start":139,"line_end":139,"column_start":1,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6329,"byte_end":6332,"line_start":198,"line_end":198,"column_start":11,"column_end":14},"name":"Rng","qualname":"::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":777},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":800},{"krate":0,"index":806}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[{"value":"/ An automatically-implemented extension trait on [`RngCore`] providing high-level","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4801,"byte_end":4885,"line_start":161,"line_end":161,"column_start":1,"column_end":85}},{"value":"/ generic methods for sampling values and other convenience methods.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4886,"byte_end":4956,"line_start":162,"line_end":162,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4957,"byte_end":4960,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ This is the primary trait to use when generating random values.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4961,"byte_end":5028,"line_start":164,"line_end":164,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5029,"byte_end":5032,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ # Generic usage","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5033,"byte_end":5052,"line_start":166,"line_end":166,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5053,"byte_end":5056,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5057,"byte_end":5127,"line_start":168,"line_end":168,"column_start":1,"column_end":70}},{"value":"/ things are worth noting here:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5128,"byte_end":5161,"line_start":169,"line_end":169,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5162,"byte_end":5165,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5166,"byte_end":5242,"line_start":171,"line_end":171,"column_start":1,"column_end":77}},{"value":"/   difference whether we use `R: Rng` or `R: RngCore`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5243,"byte_end":5300,"line_start":172,"line_end":172,"column_start":1,"column_end":58}},{"value":"/ - The `+ ?Sized` un-bounding allows functions to be called directly on","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5301,"byte_end":5375,"line_start":173,"line_end":173,"column_start":1,"column_end":75}},{"value":"/   type-erased references; i.e. `foo(r)` where `r: &mut RngCore`. Without","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5376,"byte_end":5452,"line_start":174,"line_end":174,"column_start":1,"column_end":77}},{"value":"/   this it would be necessary to write `foo(&mut r)`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5453,"byte_end":5509,"line_start":175,"line_end":175,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5510,"byte_end":5513,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5514,"byte_end":5593,"line_start":177,"line_end":177,"column_start":1,"column_end":80}},{"value":"/ trade-offs. It allows the argument to be consumed directly without a `&mut`","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5594,"byte_end":5673,"line_start":178,"line_end":178,"column_start":1,"column_end":80}},{"value":"/ (which is how `from_rng(thread_rng())` works); also it still works directly","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5674,"byte_end":5753,"line_start":179,"line_end":179,"column_start":1,"column_end":80}},{"value":"/ on references (including type-erased references). Unfortunately within the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5754,"byte_end":5832,"line_start":180,"line_end":180,"column_start":1,"column_end":79}},{"value":"/ function `foo` it is not known whether `rng` is a reference type or not,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5833,"byte_end":5909,"line_start":181,"line_end":181,"column_start":1,"column_end":77}},{"value":"/ hence many uses of `rng` require an extra reference, either explicitly","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5910,"byte_end":5984,"line_start":182,"line_end":182,"column_start":1,"column_end":75}},{"value":"/ (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":5985,"byte_end":6061,"line_start":183,"line_end":183,"column_start":1,"column_end":77}},{"value":"/ optimiser can remove redundant references later.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6062,"byte_end":6114,"line_start":184,"line_end":184,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6115,"byte_end":6118,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6119,"byte_end":6131,"line_start":186,"line_end":186,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6132,"byte_end":6135,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6136,"byte_end":6143,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/ # use rand::thread_rng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6144,"byte_end":6171,"line_start":189,"line_end":189,"column_start":1,"column_end":28}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6172,"byte_end":6190,"line_start":190,"line_end":190,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6191,"byte_end":6194,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6195,"byte_end":6244,"line_start":192,"line_end":192,"column_start":1,"column_end":50}},{"value":"/     rng.gen()","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6245,"byte_end":6262,"line_start":193,"line_end":193,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6263,"byte_end":6268,"line_start":194,"line_end":194,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6269,"byte_end":6272,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ # let v = foo(&mut thread_rng());","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6273,"byte_end":6310,"line_start":196,"line_end":196,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6311,"byte_end":6318,"line_start":197,"line_end":197,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6741,"byte_end":6744,"line_start":214,"line_end":214,"column_start":8,"column_end":11},"name":"gen","qualname":"::Rng::gen","value":"pub fn gen<T>(&mut Self) -> T where Standard: Distribution<T>","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"/ Return a random value supporting the [`Standard`] distribution.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6348,"byte_end":6415,"line_start":199,"line_end":199,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6420,"byte_end":6423,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6428,"byte_end":6469,"line_start":201,"line_end":201,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6474,"byte_end":6477,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6482,"byte_end":6495,"line_start":203,"line_end":203,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6500,"byte_end":6503,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6508,"byte_end":6515,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6520,"byte_end":6552,"line_start":206,"line_end":206,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6557,"byte_end":6560,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6565,"byte_end":6596,"line_start":208,"line_end":208,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6601,"byte_end":6628,"line_start":209,"line_end":209,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6633,"byte_end":6655,"line_start":210,"line_end":210,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6660,"byte_end":6707,"line_start":211,"line_end":211,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6712,"byte_end":6719,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6724,"byte_end":6733,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7615,"byte_end":7624,"line_start":242,"line_end":242,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::Rng::gen_range","value":"pub fn gen_range<T: SampleUniform, B1, B2>(&mut Self, B1, B2) -> T where\nB1: SampleBorrow<T> + Sized, B2: SampleBorrow<T> + Sized","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Generate a random value in the range [`low`, `high`), i.e. inclusive of\n `low` and exclusive of `high`.","sig":null,"attributes":[{"value":"/ Generate a random value in the range [`low`, `high`), i.e. inclusive of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6839,"byte_end":6914,"line_start":218,"line_end":218,"column_start":5,"column_end":80}},{"value":"/ `low` and exclusive of `high`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6919,"byte_end":6953,"line_start":219,"line_end":219,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6958,"byte_end":6961,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ This function is optimised for the case that only a single sample is","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6966,"byte_end":7038,"line_start":221,"line_end":221,"column_start":5,"column_end":77}},{"value":"/ made from the given range. See also the [`Uniform`] distribution","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7043,"byte_end":7111,"line_start":222,"line_end":222,"column_start":5,"column_end":73}},{"value":"/ type which may be faster if sampling from the same range repeatedly.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7116,"byte_end":7188,"line_start":223,"line_end":223,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7193,"byte_end":7196,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7201,"byte_end":7213,"line_start":225,"line_end":225,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7218,"byte_end":7221,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Panics if `low >= high`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7226,"byte_end":7254,"line_start":227,"line_end":227,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7259,"byte_end":7262,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7267,"byte_end":7280,"line_start":229,"line_end":229,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7285,"byte_end":7288,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7293,"byte_end":7300,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7305,"byte_end":7337,"line_start":232,"line_end":232,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7342,"byte_end":7345,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7350,"byte_end":7381,"line_start":234,"line_end":234,"column_start":5,"column_end":36}},{"value":"/ let n: u32 = rng.gen_range(0, 10);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7386,"byte_end":7424,"line_start":235,"line_end":235,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7429,"byte_end":7451,"line_start":236,"line_end":236,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0f64, 1.3e5f64);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7456,"byte_end":7507,"line_start":237,"line_end":237,"column_start":5,"column_end":56}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7512,"byte_end":7534,"line_start":238,"line_end":238,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7539,"byte_end":7546,"line_start":239,"line_end":239,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7551,"byte_end":7554,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ [`Uniform`]: distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7559,"byte_end":7607,"line_start":241,"line_end":241,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8311,"byte_end":8317,"line_start":262,"line_end":262,"column_start":8,"column_end":14},"name":"sample","qualname":"::Rng::sample","value":"pub fn sample<T, D: Distribution<T>>(&mut Self, D) -> T","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[{"value":"/ Sample a new value, using the given distribution.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7835,"byte_end":7888,"line_start":248,"line_end":248,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7893,"byte_end":7896,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ### Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7901,"byte_end":7916,"line_start":250,"line_end":250,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7921,"byte_end":7924,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7929,"byte_end":7936,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7941,"byte_end":7973,"line_start":253,"line_end":253,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7978,"byte_end":8015,"line_start":254,"line_end":254,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8020,"byte_end":8023,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8028,"byte_end":8059,"line_start":256,"line_end":256,"column_start":5,"column_end":36}},{"value":"/ let x = rng.sample(Uniform::new(10u32, 15));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8064,"byte_end":8112,"line_start":257,"line_end":257,"column_start":5,"column_end":53}},{"value":"/ // Type annotation requires two types, the type and distribution; the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8117,"byte_end":8190,"line_start":258,"line_end":258,"column_start":5,"column_end":78}},{"value":"/ // distribution can be inferred.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8195,"byte_end":8231,"line_start":259,"line_end":259,"column_start":5,"column_end":41}},{"value":"/ let y = rng.sample::<u16, _>(Uniform::new(10, 15));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8236,"byte_end":8291,"line_start":260,"line_end":260,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8296,"byte_end":8303,"line_start":261,"line_end":261,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9337,"byte_end":9348,"line_start":293,"line_end":293,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::Rng::sample_iter","value":"pub fn sample_iter<'a, T, D: Distribution<T>>(&'a mut Self, &'a D)\n-> distributions::DistIter where Self: Sized","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[{"value":"/ Create an iterator that generates values using the given distribution.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8407,"byte_end":8481,"line_start":266,"line_end":266,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8486,"byte_end":8489,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8494,"byte_end":8507,"line_start":268,"line_end":268,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8512,"byte_end":8515,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8520,"byte_end":8527,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8532,"byte_end":8564,"line_start":271,"line_end":271,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::{Alphanumeric, Uniform, Standard};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8569,"byte_end":8632,"line_start":272,"line_end":272,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8637,"byte_end":8640,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8645,"byte_end":8676,"line_start":274,"line_end":274,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8681,"byte_end":8684,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8689,"byte_end":8712,"line_start":276,"line_end":276,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = thread_rng().sample_iter(&Standard).take(16).collect();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8717,"byte_end":8794,"line_start":277,"line_end":277,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8799,"byte_end":8802,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8807,"byte_end":8821,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/ let s: String = rng.sample_iter(&Alphanumeric).take(7).collect();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8826,"byte_end":8895,"line_start":280,"line_end":280,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8900,"byte_end":8903,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ // Combined values","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8908,"byte_end":8930,"line_start":282,"line_end":282,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", thread_rng().sample_iter(&Standard).take(5)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8935,"byte_end":8999,"line_start":283,"line_end":283,"column_start":5,"column_end":69}},{"value":"/                              .collect::<Vec<(f64, bool)>>());","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9004,"byte_end":9069,"line_start":284,"line_end":284,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9074,"byte_end":9077,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9082,"byte_end":9102,"line_start":286,"line_end":286,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9107,"byte_end":9156,"line_start":287,"line_end":287,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = rng.sample_iter(&die_range);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9161,"byte_end":9212,"line_start":288,"line_end":288,"column_start":5,"column_end":56}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9217,"byte_end":9258,"line_start":289,"line_end":289,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9263,"byte_end":9307,"line_start":290,"line_end":290,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9312,"byte_end":9317,"line_start":291,"line_end":291,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9322,"byte_end":9329,"line_start":292,"line_end":292,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10393,"byte_end":10397,"line_start":321,"line_end":321,"column_start":8,"column_end":12},"name":"fill","qualname":"::Rng::fill","value":"pub fn fill<T: AsByteSliceMut + ?Sized>(&mut Self, &mut T)","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","sig":null,"attributes":[{"value":"/ Fill `dest` entirely with random bytes (uniform value distribution),","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9522,"byte_end":9594,"line_start":299,"line_end":299,"column_start":5,"column_end":77}},{"value":"/ where `dest` is any type supporting [`AsByteSliceMut`], namely slices","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9599,"byte_end":9672,"line_start":300,"line_end":300,"column_start":5,"column_end":78}},{"value":"/ and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9677,"byte_end":9748,"line_start":301,"line_end":301,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9753,"byte_end":9756,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ On big-endian platforms this performs byte-swapping to ensure","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9761,"byte_end":9826,"line_start":303,"line_end":303,"column_start":5,"column_end":70}},{"value":"/ portability of results from reproducible generators.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9831,"byte_end":9887,"line_start":304,"line_end":304,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9892,"byte_end":9895,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ This uses [`fill_bytes`] internally which may handle some RNG errors","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9900,"byte_end":9972,"line_start":306,"line_end":306,"column_start":5,"column_end":77}},{"value":"/ implicitly (e.g. waiting if the OS generator is not ready), but panics","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9977,"byte_end":10051,"line_start":307,"line_end":307,"column_start":5,"column_end":79}},{"value":"/ on other errors. See also [`try_fill`] which returns errors.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10056,"byte_end":10120,"line_start":308,"line_end":308,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10125,"byte_end":10128,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10133,"byte_end":10146,"line_start":310,"line_end":310,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10151,"byte_end":10154,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10159,"byte_end":10166,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10171,"byte_end":10203,"line_start":313,"line_end":313,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10208,"byte_end":10211,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let mut arr = [0i8; 20];","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10216,"byte_end":10244,"line_start":315,"line_end":315,"column_start":5,"column_end":33}},{"value":"/ thread_rng().fill(&mut arr[..]);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10249,"byte_end":10285,"line_start":316,"line_end":316,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10290,"byte_end":10297,"line_start":317,"line_end":317,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10302,"byte_end":10305,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10310,"byte_end":10349,"line_start":319,"line_end":319,"column_start":5,"column_end":44}},{"value":"/ [`try_fill`]: Rng::try_fill","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10354,"byte_end":10385,"line_start":320,"line_end":320,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11602,"byte_end":11610,"line_start":355,"line_end":355,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::Rng::try_fill","value":"pub fn try_fill<T: AsByteSliceMut + ?Sized>(&mut Self, &mut T)\n-> Result<(), Error>","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","sig":null,"attributes":[{"value":"/ Fill `dest` entirely with random bytes (uniform value distribution),","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10537,"byte_end":10609,"line_start":326,"line_end":326,"column_start":5,"column_end":77}},{"value":"/ where `dest` is any type supporting [`AsByteSliceMut`], namely slices","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10614,"byte_end":10687,"line_start":327,"line_end":327,"column_start":5,"column_end":78}},{"value":"/ and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10692,"byte_end":10763,"line_start":328,"line_end":328,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10768,"byte_end":10771,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ On big-endian platforms this performs byte-swapping to ensure","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10776,"byte_end":10841,"line_start":330,"line_end":330,"column_start":5,"column_end":70}},{"value":"/ portability of results from reproducible generators.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10846,"byte_end":10902,"line_start":331,"line_end":331,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10907,"byte_end":10910,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ This uses [`try_fill_bytes`] internally and forwards all RNG errors. In","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10915,"byte_end":10990,"line_start":333,"line_end":333,"column_start":5,"column_end":80}},{"value":"/ some cases errors may be resolvable; see [`ErrorKind`] and","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10995,"byte_end":11057,"line_start":334,"line_end":334,"column_start":5,"column_end":67}},{"value":"/ documentation for the RNG in use. If you do not plan to handle these","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11062,"byte_end":11134,"line_start":335,"line_end":335,"column_start":5,"column_end":77}},{"value":"/ errors you may prefer to use [`fill`].","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11139,"byte_end":11181,"line_start":336,"line_end":336,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11186,"byte_end":11189,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11194,"byte_end":11207,"line_start":338,"line_end":338,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11212,"byte_end":11215,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11220,"byte_end":11227,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ # use rand::Error;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11232,"byte_end":11254,"line_start":341,"line_end":341,"column_start":5,"column_end":27}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11259,"byte_end":11291,"line_start":342,"line_end":342,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11296,"byte_end":11299,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11304,"byte_end":11347,"line_start":344,"line_end":344,"column_start":5,"column_end":48}},{"value":"/ let mut arr = [0u64; 4];","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11352,"byte_end":11380,"line_start":345,"line_end":345,"column_start":5,"column_end":33}},{"value":"/ thread_rng().try_fill(&mut arr[..])?;","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11385,"byte_end":11426,"line_start":346,"line_end":346,"column_start":5,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11431,"byte_end":11443,"line_start":347,"line_end":347,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11448,"byte_end":11455,"line_start":348,"line_end":348,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11460,"byte_end":11463,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ # try_inner().unwrap()","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11468,"byte_end":11494,"line_start":350,"line_end":350,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11499,"byte_end":11506,"line_start":351,"line_end":351,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11511,"byte_end":11514,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11519,"byte_end":11566,"line_start":353,"line_end":353,"column_start":5,"column_end":52}},{"value":"/ [`fill`]: Rng::fill","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11571,"byte_end":11594,"line_start":354,"line_end":354,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12322,"byte_end":12330,"line_start":381,"line_end":381,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::Rng::gen_bool","value":"pub fn gen_bool(&mut Self, f64) -> bool","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"/ Return a bool with a probability `p` of being true.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11791,"byte_end":11846,"line_start":361,"line_end":361,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11851,"byte_end":11854,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11859,"byte_end":11926,"line_start":363,"line_end":363,"column_start":5,"column_end":72}},{"value":"/ sampling from the same probability repeatedly.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11931,"byte_end":11981,"line_start":364,"line_end":364,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11986,"byte_end":11989,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11994,"byte_end":12007,"line_start":366,"line_end":366,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12012,"byte_end":12015,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12020,"byte_end":12027,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12032,"byte_end":12064,"line_start":369,"line_end":369,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12069,"byte_end":12072,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12077,"byte_end":12108,"line_start":371,"line_end":371,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_bool(1.0 / 3.0));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12113,"byte_end":12157,"line_start":372,"line_end":372,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12162,"byte_end":12169,"line_start":373,"line_end":373,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12174,"byte_end":12177,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12182,"byte_end":12194,"line_start":375,"line_end":375,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12199,"byte_end":12202,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12207,"byte_end":12233,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12238,"byte_end":12241,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::bernoulli::Bernoulli","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12246,"byte_end":12300,"line_start":379,"line_end":379,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12305,"byte_end":12314,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13308,"byte_end":13317,"line_start":410,"line_end":410,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::Rng::gen_ratio","value":"pub fn gen_ratio(&mut Self, u32, u32) -> bool","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"/ Return a bool with a probability of `numerator/denominator` of being","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12444,"byte_end":12516,"line_start":386,"line_end":386,"column_start":5,"column_end":77}},{"value":"/ true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12521,"byte_end":12592,"line_start":387,"line_end":387,"column_start":5,"column_end":76}},{"value":"/ returning true. If `numerator == denominator`, then the returned value","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12597,"byte_end":12671,"line_start":388,"line_end":388,"column_start":5,"column_end":79}},{"value":"/ is guaranteed to be `true`. If `numerator == 0`, then the returned","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12676,"byte_end":12746,"line_start":389,"line_end":389,"column_start":5,"column_end":75}},{"value":"/ value is guaranteed to be `false`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12751,"byte_end":12789,"line_start":390,"line_end":390,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12794,"byte_end":12797,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12802,"byte_end":12869,"line_start":392,"line_end":392,"column_start":5,"column_end":72}},{"value":"/ sampling from the same `numerator` and `denominator` repeatedly.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12874,"byte_end":12942,"line_start":393,"line_end":393,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12947,"byte_end":12950,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12955,"byte_end":12967,"line_start":395,"line_end":395,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12972,"byte_end":12975,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12980,"byte_end":13035,"line_start":397,"line_end":397,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13040,"byte_end":13043,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13048,"byte_end":13061,"line_start":399,"line_end":399,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13066,"byte_end":13069,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13074,"byte_end":13081,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13086,"byte_end":13118,"line_start":402,"line_end":402,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13123,"byte_end":13126,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13131,"byte_end":13162,"line_start":404,"line_end":404,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_ratio(2, 3));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13167,"byte_end":13207,"line_start":405,"line_end":405,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13212,"byte_end":13219,"line_start":406,"line_end":406,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13224,"byte_end":13227,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::bernoulli::Bernoulli","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13232,"byte_end":13286,"line_start":408,"line_end":408,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13291,"byte_end":13300,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13678,"byte_end":13684,"line_start":419,"line_end":419,"column_start":8,"column_end":14},"name":"choose","qualname":"::Rng::choose","value":"pub fn choose<'a, T>(&mut Self, &'a [T]) -> Option<&'a T>","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Return a random element from `values`.","sig":null,"attributes":[{"value":"/ Return a random element from `values`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13485,"byte_end":13527,"line_start":415,"line_end":415,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13532,"byte_end":13535,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ Deprecated: use [`seq::SliceRandom::choose`] instead.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13540,"byte_end":13597,"line_start":417,"line_end":417,"column_start":5,"column_end":62}},{"value":"deprecated(since = \"0.6.0\", note = \"use SliceRandom::choose instead\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13602,"byte_end":13670,"line_start":418,"line_end":418,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14030,"byte_end":14040,"line_start":428,"line_end":428,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::Rng::choose_mut","value":"pub fn choose_mut<'a, T>(&mut Self, &'a mut [T]) -> Option<&'a mut T>","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Return a mutable pointer to a random element from `values`.","sig":null,"attributes":[{"value":"/ Return a mutable pointer to a random element from `values`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13808,"byte_end":13871,"line_start":424,"line_end":424,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13876,"byte_end":13879,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Deprecated: use [`seq::SliceRandom::choose_mut`] instead.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13884,"byte_end":13945,"line_start":426,"line_end":426,"column_start":5,"column_end":66}},{"value":"deprecated(since = \"0.6.0\", note = \"use SliceRandom::choose_mut instead\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13950,"byte_end":14022,"line_start":427,"line_end":427,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14366,"byte_end":14373,"line_start":437,"line_end":437,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::Rng::shuffle","value":"pub fn shuffle<T>(&mut Self, &mut [T])","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14176,"byte_end":14213,"line_start":433,"line_end":433,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14218,"byte_end":14221,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ Deprecated: use [`seq::SliceRandom::shuffle`] instead.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14226,"byte_end":14284,"line_start":435,"line_end":435,"column_start":5,"column_end":63}},{"value":"deprecated(since = \"0.6.0\", note = \"use SliceRandom::shuffle instead\")","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14289,"byte_end":14358,"line_start":436,"line_end":436,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":813},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14642,"byte_end":14656,"line_start":448,"line_end":448,"column_start":11,"column_end":25},"name":"AsByteSliceMut","qualname":"::AsByteSliceMut","value":"AsByteSliceMut","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":815}],"decl_id":null,"docs":" Trait for casting types to byte slices","sig":null,"attributes":[{"value":"/ Trait for casting types to byte slices","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14516,"byte_end":14558,"line_start":445,"line_end":445,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14559,"byte_end":14562,"line_start":446,"line_end":446,"column_start":1,"column_end":4}},{"value":"/ This is used by the [`Rng::fill`] and [`Rng::try_fill`] methods.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14563,"byte_end":14631,"line_start":447,"line_end":447,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14725,"byte_end":14742,"line_start":450,"line_end":450,"column_start":8,"column_end":25},"name":"as_byte_slice_mut","qualname":"::AsByteSliceMut::as_byte_slice_mut","value":"pub fn as_byte_slice_mut(&mut Self) -> &mut [u8]","parent":{"krate":0,"index":813},"children":[],"decl_id":null,"docs":" Return a mutable reference to self as a byte slice\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to self as a byte slice","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14663,"byte_end":14717,"line_start":449,"line_end":449,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14855,"byte_end":14860,"line_start":453,"line_end":453,"column_start":8,"column_end":13},"name":"to_le","qualname":"::AsByteSliceMut::to_le","value":"pub fn to_le(&mut Self)","parent":{"krate":0,"index":813},"children":[],"decl_id":null,"docs":" Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).\n","sig":null,"attributes":[{"value":"/ Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14773,"byte_end":14847,"line_start":452,"line_end":452,"column_start":5,"column_end":79}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55509,"byte_end":55516,"line_start":173,"line_end":173,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56304,"byte_end":56311,"line_start":193,"line_end":193,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59161,"byte_end":59168,"line_start":267,"line_end":267,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59357,"byte_end":59364,"line_start":274,"line_end":274,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59937,"byte_end":59945,"line_start":291,"line_end":291,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":83245,"byte_end":83253,"line_start":849,"line_end":849,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":83360,"byte_end":83375,"line_start":854,"line_end":854,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102268,"byte_end":102277,"line_start":64,"line_end":64,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103992,"byte_end":104001,"line_start":110,"line_end":110,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":116986,"byte_end":116994,"line_start":20,"line_end":20,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":117135,"byte_end":117143,"line_start":27,"line_end":27,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":117286,"byte_end":117294,"line_start":34,"line_end":34,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":117430,"byte_end":117438,"line_start":41,"line_end":41,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":117630,"byte_end":117638,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":117925,"byte_end":117933,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":122378,"byte_end":122386,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":123135,"byte_end":123147,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":123937,"byte_end":123945,"line_start":83,"line_end":83,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":125126,"byte_end":125134,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":126369,"byte_end":126377,"line_start":157,"line_end":157,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":126721,"byte_end":126729,"line_start":169,"line_end":169,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37265,"byte_end":37273,"line_start":293,"line_end":293,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37617,"byte_end":37625,"line_start":309,"line_end":309,"column_start":43,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41327,"byte_end":41341,"line_start":402,"line_end":402,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":42823,"byte_end":42837,"line_start":441,"line_end":441,"column_start":40,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160182,"byte_end":160194,"line_start":92,"line_end":92,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":161018,"byte_end":161030,"line_start":114,"line_end":114,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":161564,"byte_end":161576,"line_start":137,"line_end":137,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":161900,"byte_end":161912,"line_start":148,"line_end":148,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":162198,"byte_end":162211,"line_start":161,"line_end":161,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":163062,"byte_end":163075,"line_start":183,"line_end":183,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":457},{"krate":0,"index":459},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":165968,"byte_end":165981,"line_start":265,"line_end":265,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":166417,"byte_end":166430,"line_start":280,"line_end":280,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170351,"byte_end":170358,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170621,"byte_end":170628,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173981,"byte_end":173989,"line_start":76,"line_end":76,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":174401,"byte_end":174409,"line_start":96,"line_end":96,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":176066,"byte_end":176072,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":176484,"byte_end":176490,"line_start":55,"line_end":55,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":176770,"byte_end":176776,"line_start":67,"line_end":67,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":191922,"byte_end":191923,"line_start":406,"line_end":406,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":207424,"byte_end":207432,"line_start":28,"line_end":28,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":207888,"byte_end":207896,"line_start":50,"line_end":50,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":208202,"byte_end":208210,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":208517,"byte_end":208527,"line_start":74,"line_end":74,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":208983,"byte_end":208993,"line_start":96,"line_end":96,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":209309,"byte_end":209319,"line_start":108,"line_end":108,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":209603,"byte_end":209612,"line_start":119,"line_end":119,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210068,"byte_end":210077,"line_start":141,"line_end":141,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210391,"byte_end":210400,"line_start":153,"line_end":153,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210813,"byte_end":210822,"line_start":169,"line_end":169,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210981,"byte_end":210989,"line_start":176,"line_end":176,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":211445,"byte_end":211453,"line_start":198,"line_end":198,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":211764,"byte_end":211772,"line_start":210,"line_end":210,"column_start":20,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":211951,"byte_end":211962,"line_start":217,"line_end":217,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":212418,"byte_end":212429,"line_start":239,"line_end":239,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":212936,"byte_end":212942,"line_start":257,"line_end":257,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":213398,"byte_end":213404,"line_start":279,"line_end":279,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":213696,"byte_end":213702,"line_start":291,"line_end":291,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":215628,"byte_end":215637,"line_start":383,"line_end":383,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":216077,"byte_end":216086,"line_start":405,"line_end":405,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":216730,"byte_end":216739,"line_start":429,"line_end":429,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":218475,"byte_end":218487,"line_start":506,"line_end":506,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":219011,"byte_end":219023,"line_start":529,"line_end":529,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":219358,"byte_end":219370,"line_start":542,"line_end":542,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14510,"byte_end":14511,"line_start":443,"line_end":443,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3233,"byte_end":3246,"line_start":93,"line_end":93,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":33}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":34192,"byte_end":34199,"line_start":199,"line_end":199,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":56}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3256,"byte_end":3263,"line_start":94,"line_end":94,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":332}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3302,"byte_end":3306,"line_start":96,"line_end":96,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":363}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3316,"byte_end":3320,"line_start":97,"line_end":97,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":396}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155410,"byte_end":155417,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":397}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":155463,"byte_end":155467,"line_start":152,"line_end":152,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":474}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3330,"byte_end":3333,"line_start":98,"line_end":98,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":555}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55509,"byte_end":55516,"line_start":173,"line_end":173,"column_start":24,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56304,"byte_end":56311,"line_start":193,"line_end":193,"column_start":44,"column_end":51},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":821},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56731,"byte_end":56736,"line_start":206,"line_end":206,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57311,"byte_end":57316,"line_start":221,"line_end":221,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":99}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59161,"byte_end":59168,"line_start":267,"line_end":267,"column_start":56,"column_end":63},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":821},"to":{"krate":1,"index":2925}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59357,"byte_end":59364,"line_start":274,"line_end":274,"column_start":65,"column_end":72},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":821},"to":{"krate":1,"index":2925}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59937,"byte_end":59945,"line_start":291,"line_end":291,"column_start":43,"column_end":51},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":123},"to":{"krate":0,"index":119}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":83245,"byte_end":83253,"line_start":849,"line_end":849,"column_start":24,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":47683},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":83360,"byte_end":83375,"line_start":854,"line_end":854,"column_start":25,"column_end":40},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1081},"to":{"krate":0,"index":99}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102268,"byte_end":102277,"line_start":64,"line_end":64,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103992,"byte_end":104001,"line_start":110,"line_end":110,"column_start":29,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1104},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":116986,"byte_end":116994,"line_start":20,"line_end":20,"column_start":27,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":117135,"byte_end":117143,"line_start":27,"line_end":27,"column_start":28,"column_end":36},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":117286,"byte_end":117294,"line_start":34,"line_end":34,"column_start":28,"column_end":36},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":117430,"byte_end":117438,"line_start":41,"line_end":41,"column_start":28,"column_end":36},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":117630,"byte_end":117638,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":117925,"byte_end":117933,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":122378,"byte_end":122386,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":123135,"byte_end":123147,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1173},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":123937,"byte_end":123945,"line_start":83,"line_end":83,"column_start":29,"column_end":37},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":125126,"byte_end":125134,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":126369,"byte_end":126377,"line_start":157,"line_end":157,"column_start":37,"column_end":45},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":126721,"byte_end":126729,"line_start":169,"line_end":169,"column_start":39,"column_end":47},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":136779,"byte_end":136784,"line_start":251,"line_end":251,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":137084,"byte_end":137089,"line_start":262,"line_end":262,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":283}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":137471,"byte_end":137476,"line_start":273,"line_end":273,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":288}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37265,"byte_end":37273,"line_start":293,"line_end":293,"column_start":32,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1546},"to":{"krate":1,"index":7829}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37617,"byte_end":37625,"line_start":309,"line_end":309,"column_start":43,"column_end":51},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1546},"to":{"krate":1,"index":8099}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41327,"byte_end":41341,"line_start":402,"line_end":402,"column_start":20,"column_end":34},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1579},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":42823,"byte_end":42837,"line_start":441,"line_end":441,"column_start":40,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1579},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":160182,"byte_end":160194,"line_start":92,"line_end":92,"column_start":15,"column_end":27},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":161018,"byte_end":161030,"line_start":114,"line_end":114,"column_start":36,"column_end":48},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1588},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":161564,"byte_end":161576,"line_start":137,"line_end":137,"column_start":25,"column_end":37},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1588},"to":{"krate":1,"index":2640}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":161900,"byte_end":161912,"line_start":148,"line_end":148,"column_start":29,"column_end":41},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1588},"to":{"krate":5,"index":162}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":162198,"byte_end":162211,"line_start":161,"line_end":161,"column_start":32,"column_end":45},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1597},"to":{"krate":5,"index":65}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":163062,"byte_end":163075,"line_start":183,"line_end":183,"column_start":15,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1597},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":165968,"byte_end":165981,"line_start":265,"line_end":265,"column_start":25,"column_end":38},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1597},"to":{"krate":1,"index":2640}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":166417,"byte_end":166430,"line_start":280,"line_end":280,"column_start":29,"column_end":42},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1597},"to":{"krate":5,"index":162}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170351,"byte_end":170358,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":170621,"byte_end":170628,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1609},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":173981,"byte_end":173989,"line_start":76,"line_end":76,"column_start":18,"column_end":26},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1616},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":174401,"byte_end":174409,"line_start":96,"line_end":96,"column_start":22,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1616},"to":{"krate":5,"index":163}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":176066,"byte_end":176072,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1623},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":176484,"byte_end":176490,"line_start":55,"line_end":55,"column_start":22,"column_end":28},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1623},"to":{"krate":5,"index":163}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":176770,"byte_end":176776,"line_start":67,"line_end":67,"column_start":20,"column_end":26},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1623},"to":{"krate":5,"index":162}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183809,"byte_end":183817,"line_start":173,"line_end":173,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":7829},"to":{"krate":0,"index":569}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":183820,"byte_end":183825,"line_start":173,"line_end":173,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":569}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":191922,"byte_end":191923,"line_start":406,"line_end":406,"column_start":28,"column_end":29},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":586},"to":{"krate":0,"index":569}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":207424,"byte_end":207432,"line_start":28,"line_end":28,"column_start":18,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1630},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":207888,"byte_end":207896,"line_start":50,"line_end":50,"column_start":22,"column_end":30},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1630},"to":{"krate":5,"index":163}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":208202,"byte_end":208210,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":208517,"byte_end":208527,"line_start":74,"line_end":74,"column_start":18,"column_end":28},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1637},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":208983,"byte_end":208993,"line_start":96,"line_end":96,"column_start":22,"column_end":32},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1637},"to":{"krate":5,"index":163}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":209309,"byte_end":209319,"line_start":108,"line_end":108,"column_start":6,"column_end":16},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":209603,"byte_end":209612,"line_start":119,"line_end":119,"column_start":18,"column_end":27},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1644},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210068,"byte_end":210077,"line_start":141,"line_end":141,"column_start":22,"column_end":31},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1644},"to":{"krate":5,"index":163}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210391,"byte_end":210400,"line_start":153,"line_end":153,"column_start":6,"column_end":15},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210813,"byte_end":210822,"line_start":169,"line_end":169,"column_start":20,"column_end":29},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1644},"to":{"krate":5,"index":162}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":210981,"byte_end":210989,"line_start":176,"line_end":176,"column_start":18,"column_end":26},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1651},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":211445,"byte_end":211453,"line_start":198,"line_end":198,"column_start":22,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1651},"to":{"krate":5,"index":163}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":211764,"byte_end":211772,"line_start":210,"line_end":210,"column_start":20,"column_end":28},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1651},"to":{"krate":5,"index":162}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":211951,"byte_end":211962,"line_start":217,"line_end":217,"column_start":18,"column_end":29},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1658},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":212418,"byte_end":212429,"line_start":239,"line_end":239,"column_start":22,"column_end":33},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1658},"to":{"krate":5,"index":163}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":212936,"byte_end":212942,"line_start":257,"line_end":257,"column_start":18,"column_end":24},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1665},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":213398,"byte_end":213404,"line_start":279,"line_end":279,"column_start":22,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1665},"to":{"krate":5,"index":163}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":213696,"byte_end":213702,"line_start":291,"line_end":291,"column_start":20,"column_end":26},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1665},"to":{"krate":5,"index":162}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":215628,"byte_end":215637,"line_start":383,"line_end":383,"column_start":18,"column_end":27},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1672},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":216077,"byte_end":216086,"line_start":405,"line_end":405,"column_start":6,"column_end":15},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":216730,"byte_end":216739,"line_start":429,"line_end":429,"column_start":20,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1672},"to":{"krate":5,"index":162}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":218475,"byte_end":218487,"line_start":506,"line_end":506,"column_start":36,"column_end":48},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1679},"to":{"krate":5,"index":157}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":219011,"byte_end":219023,"line_start":529,"line_end":529,"column_start":15,"column_end":27},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":219358,"byte_end":219370,"line_start":542,"line_end":542,"column_start":29,"column_end":41},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1679},"to":{"krate":5,"index":162}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6334,"byte_end":6341,"line_start":198,"line_end":198,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":5,"index":157},"to":{"krate":0,"index":774}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14510,"byte_end":14511,"line_start":443,"line_end":443,"column_start":35,"column_end":36},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":812},"to":{"krate":0,"index":774}}]}