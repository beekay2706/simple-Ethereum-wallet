{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0","program":"C:\\Users\\Barat\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\bin\\rls.exe","arguments":["--crate-name","convert_case","--edition=2018","C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=7fea9a178c7c8f77","-C","extra-filename=-7fea9a178c7c8f77","--out-dir","e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps","-L","dependency=e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Barat\\.rustup/toolchains/stable-x86_64-pc-windows-gnu"],"output":"e:\\desk\\Desktop\\simple-Ethereum-wallet\\ether_wallet\\target\\rls\\debug\\deps\\libconvert_case-7fea9a178c7c8f77.rmeta"},"prelude":{"crate_id":{"name":"convert_case","disambiguator":[14632969100283677700,0]},"crate_root":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src","external_crates":[{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[9933199878862807254,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[7484747461353352854,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16799927046356361214,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15711970465252999667,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[1529599006453177946,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[259964764378729836,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1401592996150409924,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14734655664086317095,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4074841263751738329,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4433341090040332389,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[11866525247851478942,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[5523593855187046791,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[12555581230445737962,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":14,"id":{"name":"gimli","disambiguator":[10455931732283353623,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":15,"id":{"name":"object","disambiguator":[4593984188917249458,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":16,"id":{"name":"memchr","disambiguator":[4827989473313180090,0]}},{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[17684584555704356724,0]}}],"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":0,"byte_end":10392,"line_start":1,"line_end":337,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4450,"byte_end":4454,"line_start":111,"line_end":111,"column_start":15,"column_end":19},"alias_span":null,"name":"Case","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":0,"byte_end":10392,"line_start":1,"line_end":337,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":7},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":64}],"decl_id":null,"docs":" Converts to and from various cases.","sig":null,"attributes":[{"value":"/ Converts to and from various cases.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":0,"byte_end":39,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":40,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Command Line Utility `ccase`","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":44,"byte_end":78,"line_start":3,"line_end":3,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":79,"byte_end":82,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Since version \"0.3.0\" this crate is just a case conversion _library_.  The command line utility","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":83,"byte_end":182,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ that uses the tools in this library has been moved to the `ccase` crate.  You can read about it","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":183,"byte_end":282,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ at the [github repository](https://github.com/rutrum/convert-case/tree/master/ccase).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":283,"byte_end":372,"line_start":7,"line_end":7,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":373,"byte_end":376,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Rust Library","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":377,"byte_end":395,"line_start":9,"line_end":9,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":396,"byte_end":399,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Provides a [`Case`](enum.Case.html) enum which defines a variety of cases to convert into.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":400,"byte_end":494,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ A `Case` can be used with an item that implements the [`Casing`](trait.Casing.html) trait,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":495,"byte_end":589,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"/ which allows the item to be converted to a given case.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":590,"byte_end":648,"line_start":13,"line_end":13,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":649,"byte_end":652,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ You can convert a string or string slice into a case using the `to_case` method.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":653,"byte_end":737,"line_start":15,"line_end":15,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":738,"byte_end":745,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":746,"byte_end":783,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":784,"byte_end":787,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"Ronnie James Dio\", \"ronnie james dio\".to_case(Case::Title));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":788,"byte_end":864,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(\"ronnieJamesDio\", \"Ronnie_James_dio\".to_case(Case::Camel));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":865,"byte_end":939,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(\"Ronnie-James-Dio\", \"RONNIE_JAMES_DIO\".to_case(Case::Train));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":940,"byte_end":1016,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1017,"byte_end":1024,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1025,"byte_end":1028,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ By default, `to_case` will split along all word boundaries, that is","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1029,"byte_end":1100,"line_start":24,"line_end":24,"column_start":1,"column_end":72}},{"value":"/ * space characters ` `,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1101,"byte_end":1128,"line_start":25,"line_end":25,"column_start":1,"column_end":28}},{"value":"/ * underscores `_`,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1129,"byte_end":1151,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ * hyphens `-`,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1152,"byte_end":1170,"line_start":27,"line_end":27,"column_start":1,"column_end":19}},{"value":"/ * and changes in capitalization `aA`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1171,"byte_end":1212,"line_start":28,"line_end":28,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1213,"byte_end":1216,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ For more accuracy, the `from_case` method splits based on the word boundaries","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1217,"byte_end":1298,"line_start":30,"line_end":30,"column_start":1,"column_end":82}},{"value":"/ of a particular case.  For example, splitting from snake case will only treat","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1299,"byte_end":1380,"line_start":31,"line_end":31,"column_start":1,"column_end":82}},{"value":"/ underscores as word boundaries.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1381,"byte_end":1416,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1417,"byte_end":1424,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1425,"byte_end":1462,"line_start":34,"line_end":34,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1463,"byte_end":1466,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1467,"byte_end":1482,"line_start":36,"line_end":36,"column_start":1,"column_end":16}},{"value":"/     \"2020 04 16 My Cat Cali\",","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1483,"byte_end":1516,"line_start":37,"line_end":37,"column_start":1,"column_end":34}},{"value":"/     \"2020-04-16_my_cat_cali\".to_case(Case::Title)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1517,"byte_end":1570,"line_start":38,"line_end":38,"column_start":1,"column_end":54}},{"value":"/ );","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1571,"byte_end":1577,"line_start":39,"line_end":39,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1578,"byte_end":1593,"line_start":40,"line_end":40,"column_start":1,"column_end":16}},{"value":"/     \"2020-04-16 My Cat Cali\",","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1594,"byte_end":1627,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/     \"2020-04-16_my_cat_cali\".from_case(Case::Snake).to_case(Case::Title)","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1628,"byte_end":1704,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/ );","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1705,"byte_end":1711,"line_start":43,"line_end":43,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1712,"byte_end":1719,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1720,"byte_end":1723,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ By default (and when converting from camel case or similar cases) `convert_case`","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1724,"byte_end":1808,"line_start":46,"line_end":46,"column_start":1,"column_end":85}},{"value":"/ will detect acronyms.  It also ignores any leading, trailing, or deplicate delimeters.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1809,"byte_end":1899,"line_start":47,"line_end":47,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1900,"byte_end":1907,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1908,"byte_end":1945,"line_start":49,"line_end":49,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1946,"byte_end":1949,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"io_stream\", \"IOStream\".to_case(Case::Snake));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":1950,"byte_end":2011,"line_start":51,"line_end":51,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(\"my_json_parser\", \"myJSONParser\".to_case(Case::Snake));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2012,"byte_end":2082,"line_start":52,"line_end":52,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2083,"byte_end":2086,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"weird_var_name\", \"__weird--var _name-\".to_case(Case::Snake));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2087,"byte_end":2164,"line_start":54,"line_end":54,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2165,"byte_end":2172,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2173,"byte_end":2176,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ It also works non-ascii characters.  However, no inferences on the language itself is made.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2177,"byte_end":2272,"line_start":57,"line_end":57,"column_start":1,"column_end":96}},{"value":"/ For instance, the diagraph `ij` in dutch will not be capitalized, because it is represented","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2273,"byte_end":2368,"line_start":58,"line_end":58,"column_start":1,"column_end":96}},{"value":"/ as two distinct unicode characters.  However, `æ` would be capitalized.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2369,"byte_end":2445,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2446,"byte_end":2453,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2454,"byte_end":2491,"line_start":61,"line_end":61,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2492,"byte_end":2495,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"granat-äpfel\", \"GranatÄpfel\".to_case(Case::Kebab));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2496,"byte_end":2565,"line_start":63,"line_end":63,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2566,"byte_end":2569,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // The example from str::to_lowercase documentation","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2570,"byte_end":2625,"line_start":65,"line_end":65,"column_start":1,"column_end":56}},{"value":"/ let odysseus = \"ὈΔΥΣΣΕΎΣ\";","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2626,"byte_end":2665,"line_start":66,"line_end":66,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(\"ὀδυσσεύς\", odysseus.to_case(Case::Lower));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2666,"byte_end":2733,"line_start":67,"line_end":67,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2734,"byte_end":2741,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2742,"byte_end":2746,"line_start":69,"line_end":69,"column_start":1,"column_end":5}},{"value":"/ For the purposes of case conversion, characters followed by numerics and vice-versa are ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2747,"byte_end":2839,"line_start":70,"line_end":70,"column_start":1,"column_end":93}},{"value":"/ considered word boundaries.  In addition, any special ascii characters (besides `_` and `-`) ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2840,"byte_end":2937,"line_start":71,"line_end":71,"column_start":1,"column_end":98}},{"value":"/ are ignored.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2938,"byte_end":2954,"line_start":72,"line_end":72,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2955,"byte_end":2962,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":2963,"byte_end":3000,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/ ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3001,"byte_end":3005,"line_start":75,"line_end":75,"column_start":1,"column_end":5}},{"value":"/ assert_eq!(\"e_5150\", \"E5150\".to_case(Case::Snake));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3006,"byte_end":3061,"line_start":76,"line_end":76,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(\"10,000_days\", \"10,000Days\".to_case(Case::Snake));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3062,"byte_end":3127,"line_start":77,"line_end":77,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(\"HELLO, WORLD!\", \"Hello, world!\".to_case(Case::Upper));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3128,"byte_end":3198,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(\"One\\ntwo\\nthree\", \"ONE\\nTWO\\nTHREE\".to_case(Case::Title));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3199,"byte_end":3273,"line_start":79,"line_end":79,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3274,"byte_end":3281,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3282,"byte_end":3285,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ # Note on Accuracy","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3286,"byte_end":3308,"line_start":82,"line_end":82,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3309,"byte_end":3312,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ The `Casing` methods `from_case` and `to_case` do not fail.  Conversion to a case will always","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3313,"byte_end":3410,"line_start":84,"line_end":84,"column_start":1,"column_end":98}},{"value":"/ succeed.  However, the results can still be unexpected.  Failure to detect any word boundaries","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3411,"byte_end":3509,"line_start":85,"line_end":85,"column_start":1,"column_end":99}},{"value":"/ for a particular case means the entire string will be considered a single word.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3510,"byte_end":3593,"line_start":86,"line_end":86,"column_start":1,"column_end":84}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3594,"byte_end":3601,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3602,"byte_end":3639,"line_start":88,"line_end":88,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3640,"byte_end":3643,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // Mistakenly parsing using Case::Snake","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3644,"byte_end":3687,"line_start":90,"line_end":90,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(\"My-kebab-var\", \"my-kebab-var\".from_case(Case::Snake).to_case(Case::Title));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3688,"byte_end":3779,"line_start":91,"line_end":91,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3780,"byte_end":3783,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ // Converts using an unexpected method","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3784,"byte_end":3826,"line_start":93,"line_end":93,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(\"my_kebab_like_variable\", \"myKebab-like-variable\".to_case(Case::Snake));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3827,"byte_end":3914,"line_start":94,"line_end":94,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3915,"byte_end":3922,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3923,"byte_end":3926,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Random Feature","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3927,"byte_end":3947,"line_start":97,"line_end":97,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3948,"byte_end":3951,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ To ensure this library had zero dependencies, randomness was moved to the _random_ feature,","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":3952,"byte_end":4047,"line_start":99,"line_end":99,"column_start":1,"column_end":96}},{"value":"/ which requires the `rand` crate. You can enable this feature by including the ","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4048,"byte_end":4130,"line_start":100,"line_end":100,"column_start":1,"column_end":83}},{"value":"/ following in your `Cargo.toml`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4131,"byte_end":4166,"line_start":101,"line_end":101,"column_start":1,"column_end":36}},{"value":"/ ```{toml}","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4167,"byte_end":4180,"line_start":102,"line_end":102,"column_start":1,"column_end":14}},{"value":"/ [dependencies]","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4181,"byte_end":4199,"line_start":103,"line_end":103,"column_start":1,"column_end":19}},{"value":"/ convert_case = { version = \"^0.3, features = [\"random\"] }","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4200,"byte_end":4261,"line_start":104,"line_end":104,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4262,"byte_end":4269,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/ This will add two additional cases: Random and PseudoRandom.  You can read about their","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4270,"byte_end":4360,"line_start":106,"line_end":106,"column_start":1,"column_end":91}},{"value":"/ construction in the [Case enum](enum.Case.html).","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4361,"byte_end":4413,"line_start":107,"line_end":107,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11014,"byte_end":11019,"line_start":22,"line_end":22,"column_start":5,"column_end":10},"name":"Upper","qualname":"::case::Case::Upper","value":"Case::Upper","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Uppercase strings are delimited by spaces and all characters are uppercase.","sig":null,"attributes":[{"value":"/ Uppercase strings are delimited by spaces and all characters are uppercase.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10776,"byte_end":10855,"line_start":16,"line_end":16,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10860,"byte_end":10863,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10868,"byte_end":10875,"line_start":18,"line_end":18,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10880,"byte_end":10917,"line_start":19,"line_end":19,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"MY VARIABLE NAME\", \"My variable NAME\".to_case(Case::Upper))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10922,"byte_end":10997,"line_start":20,"line_end":20,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11002,"byte_end":11009,"line_start":21,"line_end":21,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11264,"byte_end":11269,"line_start":30,"line_end":30,"column_start":5,"column_end":10},"name":"Lower","qualname":"::case::Case::Lower","value":"Case::Lower","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Lowercase strings are delimited by spaces and all characters are lowercase.","sig":null,"attributes":[{"value":"/ Lowercase strings are delimited by spaces and all characters are lowercase.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11026,"byte_end":11105,"line_start":24,"line_end":24,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11110,"byte_end":11113,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11118,"byte_end":11125,"line_start":26,"line_end":26,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11130,"byte_end":11167,"line_start":27,"line_end":27,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"my variable name\", \"My variable NAME\".to_case(Case::Lower))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11172,"byte_end":11247,"line_start":28,"line_end":28,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11252,"byte_end":11259,"line_start":29,"line_end":29,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11655,"byte_end":11660,"line_start":40,"line_end":40,"column_start":5,"column_end":10},"name":"Title","qualname":"::case::Case::Title","value":"Case::Title","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Title case strings are delimited by spaces. Only the leading character of\n each word is uppercase.  No inferences are made about language, so words\n like \"as\", \"to\", and \"for\" will still be capitalized.","sig":null,"attributes":[{"value":"/ Title case strings are delimited by spaces. Only the leading character of","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11276,"byte_end":11353,"line_start":32,"line_end":32,"column_start":5,"column_end":82}},{"value":"/ each word is uppercase.  No inferences are made about language, so words","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11358,"byte_end":11434,"line_start":33,"line_end":33,"column_start":5,"column_end":81}},{"value":"/ like \"as\", \"to\", and \"for\" will still be capitalized.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11439,"byte_end":11496,"line_start":34,"line_end":34,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11501,"byte_end":11504,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11509,"byte_end":11516,"line_start":36,"line_end":36,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11521,"byte_end":11558,"line_start":37,"line_end":37,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"My Variable Name\", \"My variable NAME\".to_case(Case::Title))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11563,"byte_end":11638,"line_start":38,"line_end":38,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11643,"byte_end":11650,"line_start":39,"line_end":39,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11980,"byte_end":11986,"line_start":49,"line_end":49,"column_start":5,"column_end":11},"name":"Toggle","qualname":"::case::Case::Toggle","value":"Case::Toggle","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Toggle case strings are delimited by spaces.  All characters are uppercase except\n for the leading character of each word, which is lowercase.","sig":null,"attributes":[{"value":"/ Toggle case strings are delimited by spaces.  All characters are uppercase except","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11667,"byte_end":11752,"line_start":42,"line_end":42,"column_start":5,"column_end":90}},{"value":"/ for the leading character of each word, which is lowercase.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11757,"byte_end":11820,"line_start":43,"line_end":43,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11825,"byte_end":11828,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11833,"byte_end":11840,"line_start":45,"line_end":45,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11845,"byte_end":11882,"line_start":46,"line_end":46,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"mY vARIABLE nAME\", \"My variable NAME\".to_case(Case::Toggle))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11887,"byte_end":11963,"line_start":47,"line_end":47,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11968,"byte_end":11975,"line_start":48,"line_end":48,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12266,"byte_end":12271,"line_start":58,"line_end":58,"column_start":5,"column_end":10},"name":"Camel","qualname":"::case::Case::Camel","value":"Case::Camel","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Camel case strings are lowercase, but for every word _except the first_ the\n first letter is capitalized.","sig":null,"attributes":[{"value":"/ Camel case strings are lowercase, but for every word _except the first_ the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":11993,"byte_end":12072,"line_start":51,"line_end":51,"column_start":5,"column_end":84}},{"value":"/ first letter is capitalized.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12077,"byte_end":12109,"line_start":52,"line_end":52,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12114,"byte_end":12117,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12122,"byte_end":12129,"line_start":54,"line_end":54,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12134,"byte_end":12171,"line_start":55,"line_end":55,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"myVariableName\", \"My variable NAME\".to_case(Case::Camel))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12176,"byte_end":12249,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12254,"byte_end":12261,"line_start":57,"line_end":57,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12534,"byte_end":12540,"line_start":67,"line_end":67,"column_start":5,"column_end":11},"name":"Pascal","qualname":"::case::Case::Pascal","value":"Case::Pascal","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Pascal case strings are lowercase, but for every word the\n first letter is capitalized.","sig":null,"attributes":[{"value":"/ Pascal case strings are lowercase, but for every word the","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12278,"byte_end":12339,"line_start":60,"line_end":60,"column_start":5,"column_end":66}},{"value":"/ first letter is capitalized.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12344,"byte_end":12376,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12381,"byte_end":12384,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12389,"byte_end":12396,"line_start":63,"line_end":63,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12401,"byte_end":12438,"line_start":64,"line_end":64,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"MyVariableName\", \"My variable NAME\".to_case(Case::Pascal))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12443,"byte_end":12517,"line_start":65,"line_end":65,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12522,"byte_end":12529,"line_start":66,"line_end":66,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12612,"byte_end":12622,"line_start":70,"line_end":70,"column_start":5,"column_end":15},"name":"UpperCamel","qualname":"::case::Case::UpperCamel","value":"Case::UpperCamel","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Upper camel case is an alternative name for Pascal case.\n","sig":null,"attributes":[{"value":"/ Upper camel case is an alternative name for Pascal case.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12547,"byte_end":12607,"line_start":69,"line_end":69,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12866,"byte_end":12871,"line_start":78,"line_end":78,"column_start":5,"column_end":10},"name":"Snake","qualname":"::case::Case::Snake","value":"Case::Snake","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Snake case strings are delimited by underscores `_` and are all lowercase.","sig":null,"attributes":[{"value":"/ Snake case strings are delimited by underscores `_` and are all lowercase.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12629,"byte_end":12707,"line_start":72,"line_end":72,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12712,"byte_end":12715,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12720,"byte_end":12727,"line_start":74,"line_end":74,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12732,"byte_end":12769,"line_start":75,"line_end":75,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"my_variable_name\", \"My variable NAME\".to_case(Case::Snake))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12774,"byte_end":12849,"line_start":76,"line_end":76,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12854,"byte_end":12861,"line_start":77,"line_end":77,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13126,"byte_end":13136,"line_start":86,"line_end":86,"column_start":5,"column_end":15},"name":"UpperSnake","qualname":"::case::Case::UpperSnake","value":"Case::UpperSnake","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Upper snake case strings are delimited by underscores `_` and are all uppercase.","sig":null,"attributes":[{"value":"/ Upper snake case strings are delimited by underscores `_` and are all uppercase.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12878,"byte_end":12962,"line_start":80,"line_end":80,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12967,"byte_end":12970,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12975,"byte_end":12982,"line_start":82,"line_end":82,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":12987,"byte_end":13024,"line_start":83,"line_end":83,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"MY_VARIABLE_NAME\", \"My variable NAME\".to_case(Case::UpperSnake))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13029,"byte_end":13109,"line_start":84,"line_end":84,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13114,"byte_end":13121,"line_start":85,"line_end":85,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13221,"byte_end":13235,"line_start":89,"line_end":89,"column_start":5,"column_end":19},"name":"ScreamingSnake","qualname":"::case::Case::ScreamingSnake","value":"Case::ScreamingSnake","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Screaming snake case is an alternative name for upper snake case.\n","sig":null,"attributes":[{"value":"/ Screaming snake case is an alternative name for upper snake case.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13147,"byte_end":13216,"line_start":88,"line_end":88,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13475,"byte_end":13480,"line_start":97,"line_end":97,"column_start":5,"column_end":10},"name":"Kebab","qualname":"::case::Case::Kebab","value":"Case::Kebab","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Kebab case strings are delimited by hyphens `-` and are all lowercase.","sig":null,"attributes":[{"value":"/ Kebab case strings are delimited by hyphens `-` and are all lowercase.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13242,"byte_end":13316,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13321,"byte_end":13324,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13329,"byte_end":13336,"line_start":93,"line_end":93,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13341,"byte_end":13378,"line_start":94,"line_end":94,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"my-variable-name\", \"My variable NAME\".to_case(Case::Kebab))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13383,"byte_end":13458,"line_start":95,"line_end":95,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13463,"byte_end":13470,"line_start":96,"line_end":96,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13720,"byte_end":13725,"line_start":105,"line_end":105,"column_start":5,"column_end":10},"name":"Cobol","qualname":"::case::Case::Cobol","value":"Case::Cobol","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Cobol case strings are delimited by hyphens `-` and are all uppercase.","sig":null,"attributes":[{"value":"/ Cobol case strings are delimited by hyphens `-` and are all uppercase.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13487,"byte_end":13561,"line_start":99,"line_end":99,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13566,"byte_end":13569,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13574,"byte_end":13581,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13586,"byte_end":13623,"line_start":102,"line_end":102,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"MY-VARIABLE-NAME\", \"My variable NAME\".to_case(Case::Cobol))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13628,"byte_end":13703,"line_start":103,"line_end":103,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13708,"byte_end":13715,"line_start":104,"line_end":104,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14028,"byte_end":14033,"line_start":114,"line_end":114,"column_start":5,"column_end":10},"name":"Train","qualname":"::case::Case::Train","value":"Case::Train","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Train case strings are delimited by hyphens `-`.  All characters are lowercase\n except for the leading character of each word.","sig":null,"attributes":[{"value":"/ Train case strings are delimited by hyphens `-`.  All characters are lowercase","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13732,"byte_end":13814,"line_start":107,"line_end":107,"column_start":5,"column_end":87}},{"value":"/ except for the leading character of each word.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13819,"byte_end":13869,"line_start":108,"line_end":108,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13874,"byte_end":13877,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13882,"byte_end":13889,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13894,"byte_end":13931,"line_start":111,"line_end":111,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"My-Variable-Name\", \"My variable NAME\".to_case(Case::Train))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":13936,"byte_end":14011,"line_start":112,"line_end":112,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14016,"byte_end":14023,"line_start":113,"line_end":113,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14338,"byte_end":14342,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Flat","qualname":"::case::Case::Flat","value":"Case::Flat","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Flat case strings are all lowercase, with no delimiter.  Converting to\n this case is **lossy**.  That is, word boundaries are lost.","sig":null,"attributes":[{"value":"/ Flat case strings are all lowercase, with no delimiter.  Converting to","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14040,"byte_end":14114,"line_start":116,"line_end":116,"column_start":5,"column_end":79}},{"value":"/ this case is **lossy**.  That is, word boundaries are lost.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14119,"byte_end":14182,"line_start":117,"line_end":117,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14187,"byte_end":14190,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14195,"byte_end":14202,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14207,"byte_end":14244,"line_start":120,"line_end":120,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"myvariablename\", \"My variable NAME\".to_case(Case::Flat))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14249,"byte_end":14321,"line_start":121,"line_end":121,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14326,"byte_end":14333,"line_start":122,"line_end":122,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14658,"byte_end":14667,"line_start":132,"line_end":132,"column_start":5,"column_end":14},"name":"UpperFlat","qualname":"::case::Case::UpperFlat","value":"Case::UpperFlat","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Upper flat case strings are all uppercase, with no delimiter.  Converting to\n this case is **lossy**.  That is, word boundaries are lost.","sig":null,"attributes":[{"value":"/ Upper flat case strings are all uppercase, with no delimiter.  Converting to","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14349,"byte_end":14429,"line_start":125,"line_end":125,"column_start":5,"column_end":85}},{"value":"/ this case is **lossy**.  That is, word boundaries are lost.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14434,"byte_end":14497,"line_start":126,"line_end":126,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14502,"byte_end":14505,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14510,"byte_end":14517,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14522,"byte_end":14559,"line_start":129,"line_end":129,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"MYVARIABLENAME\", \"My variable NAME\".to_case(Case::UpperFlat))","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14564,"byte_end":14641,"line_start":130,"line_end":130,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14646,"byte_end":14653,"line_start":131,"line_end":131,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14948,"byte_end":14959,"line_start":140,"line_end":140,"column_start":5,"column_end":16},"name":"Alternating","qualname":"::case::Case::Alternating","value":"Case::Alternating","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Alternating case strings are delimited by spaces.  Characters alternate between uppercase\n and lowercase.\n ```\n use convert_case::{Case, Casing};\n assert_eq!(\"mY vArIaBlE nAmE\", \"My variable NAME\".to_case(Case::Alternating));\n ```\n","sig":null,"attributes":[{"value":"/ Alternating case strings are delimited by spaces.  Characters alternate between uppercase","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14674,"byte_end":14767,"line_start":134,"line_end":134,"column_start":5,"column_end":98}},{"value":"/ and lowercase.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14772,"byte_end":14790,"line_start":135,"line_end":135,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14795,"byte_end":14802,"line_start":136,"line_end":136,"column_start":5,"column_end":12}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14807,"byte_end":14844,"line_start":137,"line_end":137,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(\"mY vArIaBlE nAmE\", \"My variable NAME\".to_case(Case::Alternating));","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14849,"byte_end":14931,"line_start":138,"line_end":138,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":14936,"byte_end":14943,"line_start":139,"line_end":139,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10764,"byte_end":10768,"line_start":14,"line_end":14,"column_start":10,"column_end":14},"name":"Case","qualname":"::case::Case","value":"pub enum Case {\n    Upper,\n    Lower,\n    Title,\n    Toggle,\n    Camel,\n    Pascal,\n    UpperCamel,\n    Snake,\n    UpperSnake,\n    ScreamingSnake,\n    Kebab,\n    Cobol,\n    Train,\n    Flat,\n    UpperFlat,\n    Alternating,\n}","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98}],"decl_id":null,"docs":" Defines the type of casing a string can be.","sig":null,"attributes":[{"value":"/ Defines the type of casing a string can be.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10436,"byte_end":10483,"line_start":4,"line_end":4,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10484,"byte_end":10487,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10488,"byte_end":10495,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10496,"byte_end":10533,"line_start":7,"line_end":7,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10534,"byte_end":10537,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ let super_mario_title: String = \"super_mario_64\".to_case(Case::Title);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10538,"byte_end":10612,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(\"Super Mario 64\", super_mario_title);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10613,"byte_end":10665,"line_start":10,"line_end":10,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":10666,"byte_end":10673,"line_start":11,"line_end":11,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":5},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":16192,"byte_end":16201,"line_start":171,"line_end":171,"column_start":12,"column_end":21},"name":"all_cases","qualname":"<Case>::all_cases","value":"pub fn all_cases() -> Vec<Case>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector with all case enum variants.  This was\n created for use in the `ccase` binary.\n","sig":null,"attributes":[{"value":"/ Returns a vector with all case enum variants.  This was","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":16074,"byte_end":16133,"line_start":169,"line_end":169,"column_start":5,"column_end":64}},{"value":"/ created for use in the `ccase` binary.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":16138,"byte_end":16180,"line_start":170,"line_end":170,"column_start":5,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4613,"byte_end":4619,"line_start":117,"line_end":117,"column_start":11,"column_end":17},"name":"Casing","qualname":"::Casing","value":"Casing","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52}],"decl_id":null,"docs":" Describes items that can be converted into a case.","sig":null,"attributes":[{"value":"/ Describes items that can be converted into a case.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4475,"byte_end":4529,"line_start":114,"line_end":114,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4530,"byte_end":4533,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ Implemented for string slices `&str` and owned strings `String`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4534,"byte_end":4602,"line_start":116,"line_end":116,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4687,"byte_end":4694,"line_start":119,"line_end":119,"column_start":8,"column_end":15},"name":"to_case","qualname":"::Casing::to_case","value":"pub fn to_case(&Self, Case) -> String","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" References `self` and converts to the given case.\n","sig":null,"attributes":[{"value":"/ References `self` and converts to the given case.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4626,"byte_end":4679,"line_start":118,"line_end":118,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4859,"byte_end":4868,"line_start":123,"line_end":123,"column_start":8,"column_end":17},"name":"from_case","qualname":"::Casing::from_case","value":"pub fn from_case(&Self, Case) -> FromCasing","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Creates a `FromCasing` struct, which saves information about\n how to parse `self` before converting to a case.\n","sig":null,"attributes":[{"value":"/ Creates a `FromCasing` struct, which saves information about","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4730,"byte_end":4794,"line_start":121,"line_end":121,"column_start":5,"column_end":69}},{"value":"/ how to parse `self` before converting to a case.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":4799,"byte_end":4851,"line_start":122,"line_end":122,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5748,"byte_end":5758,"line_start":156,"line_end":156,"column_start":12,"column_end":22},"name":"FromCasing","qualname":"::FromCasing","value":"FromCasing {  }","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"decl_id":null,"docs":" Holds information about parsing before converting into a case.","sig":null,"attributes":[{"value":"/ Holds information about parsing before converting into a case.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5359,"byte_end":5425,"line_start":146,"line_end":146,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5426,"byte_end":5429,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ This struct is used when invoking the `from_case` method on","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5430,"byte_end":5493,"line_start":148,"line_end":148,"column_start":1,"column_end":64}},{"value":"/ `Casing`.  `FromCasing` also implements `Casing`.","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5494,"byte_end":5547,"line_start":149,"line_end":149,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5548,"byte_end":5555,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ use convert_case::{Case, Casing};","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5556,"byte_end":5593,"line_start":151,"line_end":151,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5594,"byte_end":5597,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ let title = \"ninety-nine_problems\".from_case(Case::Snake).to_case(Case::Title);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5598,"byte_end":5681,"line_start":153,"line_end":153,"column_start":1,"column_end":84}},{"value":"/ assert_eq!(\"Ninety-nine Problems\", title);","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5682,"byte_end":5728,"line_start":154,"line_end":154,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5729,"byte_end":5736,"line_start":155,"line_end":155,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":15929,"byte_end":15933,"line_start":166,"line_end":166,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":5}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\words.rs","byte_start":17109,"byte_end":17114,"line_start":10,"line_end":10,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5147,"byte_end":5153,"line_start":136,"line_end":136,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5803,"byte_end":5813,"line_start":161,"line_end":161,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5922,"byte_end":5932,"line_start":167,"line_end":167,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\case.rs","byte_start":15929,"byte_end":15933,"line_start":166,"line_end":166,"column_start":6,"column_end":10},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":67},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\words.rs","byte_start":17109,"byte_end":17114,"line_start":10,"line_end":10,"column_start":6,"column_end":11},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":11},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5147,"byte_end":5153,"line_start":136,"line_end":136,"column_start":17,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":7617},"to":{"krate":0,"index":50}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5803,"byte_end":5813,"line_start":161,"line_end":161,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":59},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Barat\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\convert_case-0.4.0\\src\\lib.rs","byte_start":5922,"byte_end":5932,"line_start":167,"line_end":167,"column_start":17,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":59},"to":{"krate":0,"index":50}}]}